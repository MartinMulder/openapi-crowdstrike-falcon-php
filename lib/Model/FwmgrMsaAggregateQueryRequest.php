<?php
/**
 * FwmgrMsaAggregateQueryRequest
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.eu-1.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.eu-1.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.eu-1.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FwmgrMsaAggregateQueryRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class FwmgrMsaAggregateQueryRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'fwmgr.msa.AggregateQueryRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'date_ranges' => '\OpenAPI\Client\Model\FwmgrMsaDateRangeSpec[]',
        'field' => 'string',
        'filter' => 'string',
        'interval' => 'string',
        'min_doc_count' => 'int',
        'missing' => 'string',
        'name' => 'string',
        'q' => 'string',
        'ranges' => '\OpenAPI\Client\Model\FwmgrMsaRangeSpec[]',
        'size' => 'int',
        'sort' => 'string',
        'sub_aggregates' => '\OpenAPI\Client\Model\FwmgrMsaAggregateQueryRequest[]',
        'time_zone' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'date_ranges' => null,
        'field' => null,
        'filter' => null,
        'interval' => null,
        'min_doc_count' => 'int64',
        'missing' => null,
        'name' => null,
        'q' => null,
        'ranges' => null,
        'size' => 'int32',
        'sort' => null,
        'sub_aggregates' => null,
        'time_zone' => null,
        'type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date_ranges' => 'date_ranges',
        'field' => 'field',
        'filter' => 'filter',
        'interval' => 'interval',
        'min_doc_count' => 'min_doc_count',
        'missing' => 'missing',
        'name' => 'name',
        'q' => 'q',
        'ranges' => 'ranges',
        'size' => 'size',
        'sort' => 'sort',
        'sub_aggregates' => 'sub_aggregates',
        'time_zone' => 'time_zone',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date_ranges' => 'setDateRanges',
        'field' => 'setField',
        'filter' => 'setFilter',
        'interval' => 'setInterval',
        'min_doc_count' => 'setMinDocCount',
        'missing' => 'setMissing',
        'name' => 'setName',
        'q' => 'setQ',
        'ranges' => 'setRanges',
        'size' => 'setSize',
        'sort' => 'setSort',
        'sub_aggregates' => 'setSubAggregates',
        'time_zone' => 'setTimeZone',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date_ranges' => 'getDateRanges',
        'field' => 'getField',
        'filter' => 'getFilter',
        'interval' => 'getInterval',
        'min_doc_count' => 'getMinDocCount',
        'missing' => 'getMissing',
        'name' => 'getName',
        'q' => 'getQ',
        'ranges' => 'getRanges',
        'size' => 'getSize',
        'sort' => 'getSort',
        'sub_aggregates' => 'getSubAggregates',
        'time_zone' => 'getTimeZone',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_ranges'] = $data['date_ranges'] ?? null;
        $this->container['field'] = $data['field'] ?? null;
        $this->container['filter'] = $data['filter'] ?? null;
        $this->container['interval'] = $data['interval'] ?? null;
        $this->container['min_doc_count'] = $data['min_doc_count'] ?? null;
        $this->container['missing'] = $data['missing'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['q'] = $data['q'] ?? null;
        $this->container['ranges'] = $data['ranges'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['sort'] = $data['sort'] ?? null;
        $this->container['sub_aggregates'] = $data['sub_aggregates'] ?? null;
        $this->container['time_zone'] = $data['time_zone'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date_ranges'] === null) {
            $invalidProperties[] = "'date_ranges' can't be null";
        }
        if ($this->container['field'] === null) {
            $invalidProperties[] = "'field' can't be null";
        }
        if ($this->container['filter'] === null) {
            $invalidProperties[] = "'filter' can't be null";
        }
        if ($this->container['interval'] === null) {
            $invalidProperties[] = "'interval' can't be null";
        }
        if ($this->container['min_doc_count'] === null) {
            $invalidProperties[] = "'min_doc_count' can't be null";
        }
        if ($this->container['missing'] === null) {
            $invalidProperties[] = "'missing' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['q'] === null) {
            $invalidProperties[] = "'q' can't be null";
        }
        if ($this->container['ranges'] === null) {
            $invalidProperties[] = "'ranges' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['sort'] === null) {
            $invalidProperties[] = "'sort' can't be null";
        }
        if ($this->container['sub_aggregates'] === null) {
            $invalidProperties[] = "'sub_aggregates' can't be null";
        }
        if ($this->container['time_zone'] === null) {
            $invalidProperties[] = "'time_zone' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date_ranges
     *
     * @return \OpenAPI\Client\Model\FwmgrMsaDateRangeSpec[]
     */
    public function getDateRanges()
    {
        return $this->container['date_ranges'];
    }

    /**
     * Sets date_ranges
     *
     * @param \OpenAPI\Client\Model\FwmgrMsaDateRangeSpec[] $date_ranges date_ranges
     *
     * @return self
     */
    public function setDateRanges($date_ranges)
    {
        $this->container['date_ranges'] = $date_ranges;

        return $this;
    }

    /**
     * Gets field
     *
     * @return string
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param string $field field
     *
     * @return self
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets filter
     *
     * @return string
     */
    public function getFilter()
    {
        return $this->container['filter'];
    }

    /**
     * Sets filter
     *
     * @param string $filter filter
     *
     * @return self
     */
    public function setFilter($filter)
    {
        $this->container['filter'] = $filter;

        return $this;
    }

    /**
     * Gets interval
     *
     * @return string
     */
    public function getInterval()
    {
        return $this->container['interval'];
    }

    /**
     * Sets interval
     *
     * @param string $interval interval
     *
     * @return self
     */
    public function setInterval($interval)
    {
        $this->container['interval'] = $interval;

        return $this;
    }

    /**
     * Gets min_doc_count
     *
     * @return int
     */
    public function getMinDocCount()
    {
        return $this->container['min_doc_count'];
    }

    /**
     * Sets min_doc_count
     *
     * @param int $min_doc_count min_doc_count
     *
     * @return self
     */
    public function setMinDocCount($min_doc_count)
    {
        $this->container['min_doc_count'] = $min_doc_count;

        return $this;
    }

    /**
     * Gets missing
     *
     * @return string
     */
    public function getMissing()
    {
        return $this->container['missing'];
    }

    /**
     * Sets missing
     *
     * @param string $missing missing
     *
     * @return self
     */
    public function setMissing($missing)
    {
        $this->container['missing'] = $missing;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets q
     *
     * @return string
     */
    public function getQ()
    {
        return $this->container['q'];
    }

    /**
     * Sets q
     *
     * @param string $q q
     *
     * @return self
     */
    public function setQ($q)
    {
        $this->container['q'] = $q;

        return $this;
    }

    /**
     * Gets ranges
     *
     * @return \OpenAPI\Client\Model\FwmgrMsaRangeSpec[]
     */
    public function getRanges()
    {
        return $this->container['ranges'];
    }

    /**
     * Sets ranges
     *
     * @param \OpenAPI\Client\Model\FwmgrMsaRangeSpec[] $ranges ranges
     *
     * @return self
     */
    public function setRanges($ranges)
    {
        $this->container['ranges'] = $ranges;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets sort
     *
     * @return string
     */
    public function getSort()
    {
        return $this->container['sort'];
    }

    /**
     * Sets sort
     *
     * @param string $sort sort
     *
     * @return self
     */
    public function setSort($sort)
    {
        $this->container['sort'] = $sort;

        return $this;
    }

    /**
     * Gets sub_aggregates
     *
     * @return \OpenAPI\Client\Model\FwmgrMsaAggregateQueryRequest[]
     */
    public function getSubAggregates()
    {
        return $this->container['sub_aggregates'];
    }

    /**
     * Sets sub_aggregates
     *
     * @param \OpenAPI\Client\Model\FwmgrMsaAggregateQueryRequest[] $sub_aggregates sub_aggregates
     *
     * @return self
     */
    public function setSubAggregates($sub_aggregates)
    {
        $this->container['sub_aggregates'] = $sub_aggregates;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string $time_zone time_zone
     *
     * @return self
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


