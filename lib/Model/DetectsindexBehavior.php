<?php
/**
 * DetectsindexBehavior
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.eu-1.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.eu-1.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.eu-1.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DetectsindexBehavior Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DetectsindexBehavior implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'detectsindex.Behavior';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'alleged_filetype' => 'string',
        'behavior_id' => 'string',
        'cmdline' => 'string',
        'confidence' => 'int',
        'control_graph_id' => 'string',
        'device_id' => 'string',
        'filename' => 'string',
        'ioc_description' => 'string',
        'ioc_source' => 'string',
        'ioc_type' => 'string',
        'ioc_value' => 'string',
        'md5' => 'string',
        'objective' => 'string',
        'parent_details' => '\OpenAPI\Client\Model\DetectsindexParentDetails',
        'pattern_disposition' => 'int',
        'pattern_disposition_details' => '\OpenAPI\Client\Model\CloudontologyPatternDisposition',
        'rule_instance_id' => 'string',
        'rule_instance_version' => 'int',
        'scenario' => 'string',
        'severity' => 'int',
        'sha256' => 'string',
        'tactic' => 'string',
        'technique' => 'string',
        'template_instance_id' => 'string',
        'timestamp' => '\DateTime',
        'triggering_process_graph_id' => 'string',
        'user_id' => 'string',
        'user_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'alleged_filetype' => null,
        'behavior_id' => null,
        'cmdline' => null,
        'confidence' => 'int32',
        'control_graph_id' => null,
        'device_id' => null,
        'filename' => null,
        'ioc_description' => null,
        'ioc_source' => null,
        'ioc_type' => null,
        'ioc_value' => null,
        'md5' => null,
        'objective' => null,
        'parent_details' => null,
        'pattern_disposition' => 'int32',
        'pattern_disposition_details' => null,
        'rule_instance_id' => null,
        'rule_instance_version' => 'int32',
        'scenario' => null,
        'severity' => 'int32',
        'sha256' => null,
        'tactic' => null,
        'technique' => null,
        'template_instance_id' => null,
        'timestamp' => 'date-time',
        'triggering_process_graph_id' => null,
        'user_id' => null,
        'user_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'alleged_filetype' => 'alleged_filetype',
        'behavior_id' => 'behavior_id',
        'cmdline' => 'cmdline',
        'confidence' => 'confidence',
        'control_graph_id' => 'control_graph_id',
        'device_id' => 'device_id',
        'filename' => 'filename',
        'ioc_description' => 'ioc_description',
        'ioc_source' => 'ioc_source',
        'ioc_type' => 'ioc_type',
        'ioc_value' => 'ioc_value',
        'md5' => 'md5',
        'objective' => 'objective',
        'parent_details' => 'parent_details',
        'pattern_disposition' => 'pattern_disposition',
        'pattern_disposition_details' => 'pattern_disposition_details',
        'rule_instance_id' => 'rule_instance_id',
        'rule_instance_version' => 'rule_instance_version',
        'scenario' => 'scenario',
        'severity' => 'severity',
        'sha256' => 'sha256',
        'tactic' => 'tactic',
        'technique' => 'technique',
        'template_instance_id' => 'template_instance_id',
        'timestamp' => 'timestamp',
        'triggering_process_graph_id' => 'triggering_process_graph_id',
        'user_id' => 'user_id',
        'user_name' => 'user_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'alleged_filetype' => 'setAllegedFiletype',
        'behavior_id' => 'setBehaviorId',
        'cmdline' => 'setCmdline',
        'confidence' => 'setConfidence',
        'control_graph_id' => 'setControlGraphId',
        'device_id' => 'setDeviceId',
        'filename' => 'setFilename',
        'ioc_description' => 'setIocDescription',
        'ioc_source' => 'setIocSource',
        'ioc_type' => 'setIocType',
        'ioc_value' => 'setIocValue',
        'md5' => 'setMd5',
        'objective' => 'setObjective',
        'parent_details' => 'setParentDetails',
        'pattern_disposition' => 'setPatternDisposition',
        'pattern_disposition_details' => 'setPatternDispositionDetails',
        'rule_instance_id' => 'setRuleInstanceId',
        'rule_instance_version' => 'setRuleInstanceVersion',
        'scenario' => 'setScenario',
        'severity' => 'setSeverity',
        'sha256' => 'setSha256',
        'tactic' => 'setTactic',
        'technique' => 'setTechnique',
        'template_instance_id' => 'setTemplateInstanceId',
        'timestamp' => 'setTimestamp',
        'triggering_process_graph_id' => 'setTriggeringProcessGraphId',
        'user_id' => 'setUserId',
        'user_name' => 'setUserName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'alleged_filetype' => 'getAllegedFiletype',
        'behavior_id' => 'getBehaviorId',
        'cmdline' => 'getCmdline',
        'confidence' => 'getConfidence',
        'control_graph_id' => 'getControlGraphId',
        'device_id' => 'getDeviceId',
        'filename' => 'getFilename',
        'ioc_description' => 'getIocDescription',
        'ioc_source' => 'getIocSource',
        'ioc_type' => 'getIocType',
        'ioc_value' => 'getIocValue',
        'md5' => 'getMd5',
        'objective' => 'getObjective',
        'parent_details' => 'getParentDetails',
        'pattern_disposition' => 'getPatternDisposition',
        'pattern_disposition_details' => 'getPatternDispositionDetails',
        'rule_instance_id' => 'getRuleInstanceId',
        'rule_instance_version' => 'getRuleInstanceVersion',
        'scenario' => 'getScenario',
        'severity' => 'getSeverity',
        'sha256' => 'getSha256',
        'tactic' => 'getTactic',
        'technique' => 'getTechnique',
        'template_instance_id' => 'getTemplateInstanceId',
        'timestamp' => 'getTimestamp',
        'triggering_process_graph_id' => 'getTriggeringProcessGraphId',
        'user_id' => 'getUserId',
        'user_name' => 'getUserName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['alleged_filetype'] = $data['alleged_filetype'] ?? null;
        $this->container['behavior_id'] = $data['behavior_id'] ?? null;
        $this->container['cmdline'] = $data['cmdline'] ?? null;
        $this->container['confidence'] = $data['confidence'] ?? null;
        $this->container['control_graph_id'] = $data['control_graph_id'] ?? null;
        $this->container['device_id'] = $data['device_id'] ?? null;
        $this->container['filename'] = $data['filename'] ?? null;
        $this->container['ioc_description'] = $data['ioc_description'] ?? null;
        $this->container['ioc_source'] = $data['ioc_source'] ?? null;
        $this->container['ioc_type'] = $data['ioc_type'] ?? null;
        $this->container['ioc_value'] = $data['ioc_value'] ?? null;
        $this->container['md5'] = $data['md5'] ?? null;
        $this->container['objective'] = $data['objective'] ?? null;
        $this->container['parent_details'] = $data['parent_details'] ?? null;
        $this->container['pattern_disposition'] = $data['pattern_disposition'] ?? null;
        $this->container['pattern_disposition_details'] = $data['pattern_disposition_details'] ?? null;
        $this->container['rule_instance_id'] = $data['rule_instance_id'] ?? null;
        $this->container['rule_instance_version'] = $data['rule_instance_version'] ?? null;
        $this->container['scenario'] = $data['scenario'] ?? null;
        $this->container['severity'] = $data['severity'] ?? null;
        $this->container['sha256'] = $data['sha256'] ?? null;
        $this->container['tactic'] = $data['tactic'] ?? null;
        $this->container['technique'] = $data['technique'] ?? null;
        $this->container['template_instance_id'] = $data['template_instance_id'] ?? null;
        $this->container['timestamp'] = $data['timestamp'] ?? null;
        $this->container['triggering_process_graph_id'] = $data['triggering_process_graph_id'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['user_name'] = $data['user_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['alleged_filetype'] === null) {
            $invalidProperties[] = "'alleged_filetype' can't be null";
        }
        if ($this->container['behavior_id'] === null) {
            $invalidProperties[] = "'behavior_id' can't be null";
        }
        if ($this->container['cmdline'] === null) {
            $invalidProperties[] = "'cmdline' can't be null";
        }
        if ($this->container['confidence'] === null) {
            $invalidProperties[] = "'confidence' can't be null";
        }
        if ($this->container['control_graph_id'] === null) {
            $invalidProperties[] = "'control_graph_id' can't be null";
        }
        if ($this->container['device_id'] === null) {
            $invalidProperties[] = "'device_id' can't be null";
        }
        if ($this->container['filename'] === null) {
            $invalidProperties[] = "'filename' can't be null";
        }
        if ($this->container['ioc_description'] === null) {
            $invalidProperties[] = "'ioc_description' can't be null";
        }
        if ($this->container['ioc_source'] === null) {
            $invalidProperties[] = "'ioc_source' can't be null";
        }
        if ($this->container['ioc_type'] === null) {
            $invalidProperties[] = "'ioc_type' can't be null";
        }
        if ($this->container['ioc_value'] === null) {
            $invalidProperties[] = "'ioc_value' can't be null";
        }
        if ($this->container['md5'] === null) {
            $invalidProperties[] = "'md5' can't be null";
        }
        if ($this->container['objective'] === null) {
            $invalidProperties[] = "'objective' can't be null";
        }
        if ($this->container['parent_details'] === null) {
            $invalidProperties[] = "'parent_details' can't be null";
        }
        if ($this->container['pattern_disposition'] === null) {
            $invalidProperties[] = "'pattern_disposition' can't be null";
        }
        if ($this->container['pattern_disposition_details'] === null) {
            $invalidProperties[] = "'pattern_disposition_details' can't be null";
        }
        if ($this->container['scenario'] === null) {
            $invalidProperties[] = "'scenario' can't be null";
        }
        if ($this->container['severity'] === null) {
            $invalidProperties[] = "'severity' can't be null";
        }
        if ($this->container['sha256'] === null) {
            $invalidProperties[] = "'sha256' can't be null";
        }
        if ($this->container['tactic'] === null) {
            $invalidProperties[] = "'tactic' can't be null";
        }
        if ($this->container['technique'] === null) {
            $invalidProperties[] = "'technique' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        if ($this->container['triggering_process_graph_id'] === null) {
            $invalidProperties[] = "'triggering_process_graph_id' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['user_name'] === null) {
            $invalidProperties[] = "'user_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets alleged_filetype
     *
     * @return string
     */
    public function getAllegedFiletype()
    {
        return $this->container['alleged_filetype'];
    }

    /**
     * Sets alleged_filetype
     *
     * @param string $alleged_filetype alleged_filetype
     *
     * @return self
     */
    public function setAllegedFiletype($alleged_filetype)
    {
        $this->container['alleged_filetype'] = $alleged_filetype;

        return $this;
    }

    /**
     * Gets behavior_id
     *
     * @return string
     */
    public function getBehaviorId()
    {
        return $this->container['behavior_id'];
    }

    /**
     * Sets behavior_id
     *
     * @param string $behavior_id behavior_id
     *
     * @return self
     */
    public function setBehaviorId($behavior_id)
    {
        $this->container['behavior_id'] = $behavior_id;

        return $this;
    }

    /**
     * Gets cmdline
     *
     * @return string
     */
    public function getCmdline()
    {
        return $this->container['cmdline'];
    }

    /**
     * Sets cmdline
     *
     * @param string $cmdline cmdline
     *
     * @return self
     */
    public function setCmdline($cmdline)
    {
        $this->container['cmdline'] = $cmdline;

        return $this;
    }

    /**
     * Gets confidence
     *
     * @return int
     */
    public function getConfidence()
    {
        return $this->container['confidence'];
    }

    /**
     * Sets confidence
     *
     * @param int $confidence confidence
     *
     * @return self
     */
    public function setConfidence($confidence)
    {
        $this->container['confidence'] = $confidence;

        return $this;
    }

    /**
     * Gets control_graph_id
     *
     * @return string
     */
    public function getControlGraphId()
    {
        return $this->container['control_graph_id'];
    }

    /**
     * Sets control_graph_id
     *
     * @param string $control_graph_id control_graph_id
     *
     * @return self
     */
    public function setControlGraphId($control_graph_id)
    {
        $this->container['control_graph_id'] = $control_graph_id;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string $device_id device_id
     *
     * @return self
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename filename
     *
     * @return self
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets ioc_description
     *
     * @return string
     */
    public function getIocDescription()
    {
        return $this->container['ioc_description'];
    }

    /**
     * Sets ioc_description
     *
     * @param string $ioc_description ioc_description
     *
     * @return self
     */
    public function setIocDescription($ioc_description)
    {
        $this->container['ioc_description'] = $ioc_description;

        return $this;
    }

    /**
     * Gets ioc_source
     *
     * @return string
     */
    public function getIocSource()
    {
        return $this->container['ioc_source'];
    }

    /**
     * Sets ioc_source
     *
     * @param string $ioc_source ioc_source
     *
     * @return self
     */
    public function setIocSource($ioc_source)
    {
        $this->container['ioc_source'] = $ioc_source;

        return $this;
    }

    /**
     * Gets ioc_type
     *
     * @return string
     */
    public function getIocType()
    {
        return $this->container['ioc_type'];
    }

    /**
     * Sets ioc_type
     *
     * @param string $ioc_type ioc_type
     *
     * @return self
     */
    public function setIocType($ioc_type)
    {
        $this->container['ioc_type'] = $ioc_type;

        return $this;
    }

    /**
     * Gets ioc_value
     *
     * @return string
     */
    public function getIocValue()
    {
        return $this->container['ioc_value'];
    }

    /**
     * Sets ioc_value
     *
     * @param string $ioc_value ioc_value
     *
     * @return self
     */
    public function setIocValue($ioc_value)
    {
        $this->container['ioc_value'] = $ioc_value;

        return $this;
    }

    /**
     * Gets md5
     *
     * @return string
     */
    public function getMd5()
    {
        return $this->container['md5'];
    }

    /**
     * Sets md5
     *
     * @param string $md5 md5
     *
     * @return self
     */
    public function setMd5($md5)
    {
        $this->container['md5'] = $md5;

        return $this;
    }

    /**
     * Gets objective
     *
     * @return string
     */
    public function getObjective()
    {
        return $this->container['objective'];
    }

    /**
     * Sets objective
     *
     * @param string $objective objective
     *
     * @return self
     */
    public function setObjective($objective)
    {
        $this->container['objective'] = $objective;

        return $this;
    }

    /**
     * Gets parent_details
     *
     * @return \OpenAPI\Client\Model\DetectsindexParentDetails
     */
    public function getParentDetails()
    {
        return $this->container['parent_details'];
    }

    /**
     * Sets parent_details
     *
     * @param \OpenAPI\Client\Model\DetectsindexParentDetails $parent_details parent_details
     *
     * @return self
     */
    public function setParentDetails($parent_details)
    {
        $this->container['parent_details'] = $parent_details;

        return $this;
    }

    /**
     * Gets pattern_disposition
     *
     * @return int
     */
    public function getPatternDisposition()
    {
        return $this->container['pattern_disposition'];
    }

    /**
     * Sets pattern_disposition
     *
     * @param int $pattern_disposition pattern_disposition
     *
     * @return self
     */
    public function setPatternDisposition($pattern_disposition)
    {
        $this->container['pattern_disposition'] = $pattern_disposition;

        return $this;
    }

    /**
     * Gets pattern_disposition_details
     *
     * @return \OpenAPI\Client\Model\CloudontologyPatternDisposition
     */
    public function getPatternDispositionDetails()
    {
        return $this->container['pattern_disposition_details'];
    }

    /**
     * Sets pattern_disposition_details
     *
     * @param \OpenAPI\Client\Model\CloudontologyPatternDisposition $pattern_disposition_details pattern_disposition_details
     *
     * @return self
     */
    public function setPatternDispositionDetails($pattern_disposition_details)
    {
        $this->container['pattern_disposition_details'] = $pattern_disposition_details;

        return $this;
    }

    /**
     * Gets rule_instance_id
     *
     * @return string|null
     */
    public function getRuleInstanceId()
    {
        return $this->container['rule_instance_id'];
    }

    /**
     * Sets rule_instance_id
     *
     * @param string|null $rule_instance_id rule_instance_id
     *
     * @return self
     */
    public function setRuleInstanceId($rule_instance_id)
    {
        $this->container['rule_instance_id'] = $rule_instance_id;

        return $this;
    }

    /**
     * Gets rule_instance_version
     *
     * @return int|null
     */
    public function getRuleInstanceVersion()
    {
        return $this->container['rule_instance_version'];
    }

    /**
     * Sets rule_instance_version
     *
     * @param int|null $rule_instance_version rule_instance_version
     *
     * @return self
     */
    public function setRuleInstanceVersion($rule_instance_version)
    {
        $this->container['rule_instance_version'] = $rule_instance_version;

        return $this;
    }

    /**
     * Gets scenario
     *
     * @return string
     */
    public function getScenario()
    {
        return $this->container['scenario'];
    }

    /**
     * Sets scenario
     *
     * @param string $scenario scenario
     *
     * @return self
     */
    public function setScenario($scenario)
    {
        $this->container['scenario'] = $scenario;

        return $this;
    }

    /**
     * Gets severity
     *
     * @return int
     */
    public function getSeverity()
    {
        return $this->container['severity'];
    }

    /**
     * Sets severity
     *
     * @param int $severity severity
     *
     * @return self
     */
    public function setSeverity($severity)
    {
        $this->container['severity'] = $severity;

        return $this;
    }

    /**
     * Gets sha256
     *
     * @return string
     */
    public function getSha256()
    {
        return $this->container['sha256'];
    }

    /**
     * Sets sha256
     *
     * @param string $sha256 sha256
     *
     * @return self
     */
    public function setSha256($sha256)
    {
        $this->container['sha256'] = $sha256;

        return $this;
    }

    /**
     * Gets tactic
     *
     * @return string
     */
    public function getTactic()
    {
        return $this->container['tactic'];
    }

    /**
     * Sets tactic
     *
     * @param string $tactic tactic
     *
     * @return self
     */
    public function setTactic($tactic)
    {
        $this->container['tactic'] = $tactic;

        return $this;
    }

    /**
     * Gets technique
     *
     * @return string
     */
    public function getTechnique()
    {
        return $this->container['technique'];
    }

    /**
     * Sets technique
     *
     * @param string $technique technique
     *
     * @return self
     */
    public function setTechnique($technique)
    {
        $this->container['technique'] = $technique;

        return $this;
    }

    /**
     * Gets template_instance_id
     *
     * @return string|null
     */
    public function getTemplateInstanceId()
    {
        return $this->container['template_instance_id'];
    }

    /**
     * Sets template_instance_id
     *
     * @param string|null $template_instance_id template_instance_id
     *
     * @return self
     */
    public function setTemplateInstanceId($template_instance_id)
    {
        $this->container['template_instance_id'] = $template_instance_id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets triggering_process_graph_id
     *
     * @return string
     */
    public function getTriggeringProcessGraphId()
    {
        return $this->container['triggering_process_graph_id'];
    }

    /**
     * Sets triggering_process_graph_id
     *
     * @param string $triggering_process_graph_id triggering_process_graph_id
     *
     * @return self
     */
    public function setTriggeringProcessGraphId($triggering_process_graph_id)
    {
        $this->container['triggering_process_graph_id'] = $triggering_process_graph_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


