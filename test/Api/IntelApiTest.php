<?php
/**
 * IntelApiTest
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.eu-1.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.eu-1.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.eu-1.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * IntelApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class IntelApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for getIntelActorEntities
     *
     * Retrieve specific actors using their actor IDs..
     *
     */
    public function testGetIntelActorEntities()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getIntelIndicatorEntities
     *
     * Retrieve specific indicators using their indicator IDs..
     *
     */
    public function testGetIntelIndicatorEntities()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getIntelReportEntities
     *
     * Retrieve specific reports using their report IDs..
     *
     */
    public function testGetIntelReportEntities()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getIntelReportPDF
     *
     * Return a Report PDF attachment.
     *
     */
    public function testGetIntelReportPDF()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getIntelRuleEntities
     *
     * Retrieve details for rule sets for the specified ids..
     *
     */
    public function testGetIntelRuleEntities()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getIntelRuleFile
     *
     * Download earlier rule sets..
     *
     */
    public function testGetIntelRuleFile()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getLatestIntelRuleFile
     *
     * Download the latest rule set..
     *
     */
    public function testGetLatestIntelRuleFile()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryIntelActorEntities
     *
     * Get info about actors that match provided FQL filters..
     *
     */
    public function testQueryIntelActorEntities()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryIntelActorIds
     *
     * Get actor IDs that match provided FQL filters..
     *
     */
    public function testQueryIntelActorIds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryIntelIndicatorEntities
     *
     * Get info about indicators that match provided FQL filters..
     *
     */
    public function testQueryIntelIndicatorEntities()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryIntelIndicatorIds
     *
     * Get indicators IDs that match provided FQL filters..
     *
     */
    public function testQueryIntelIndicatorIds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryIntelReportEntities
     *
     * Get info about reports that match provided FQL filters..
     *
     */
    public function testQueryIntelReportEntities()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryIntelReportIds
     *
     * Get report IDs that match provided FQL filters..
     *
     */
    public function testQueryIntelReportIds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryIntelRuleIds
     *
     * Search for rule IDs that match provided filter criteria..
     *
     */
    public function testQueryIntelRuleIds()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
