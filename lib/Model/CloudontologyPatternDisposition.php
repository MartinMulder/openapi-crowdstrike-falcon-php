<?php
/**
 * CloudontologyPatternDisposition
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.eu-1.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.eu-1.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.eu-1.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CloudontologyPatternDisposition Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class CloudontologyPatternDisposition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'cloudontology.PatternDisposition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bootup_safeguard_enabled' => 'bool',
        'critical_process_disabled' => 'bool',
        'detect' => 'bool',
        'fs_operation_blocked' => 'bool',
        'inddet_mask' => 'bool',
        'indicator' => 'bool',
        'kill_parent' => 'bool',
        'kill_process' => 'bool',
        'kill_subprocess' => 'bool',
        'operation_blocked' => 'bool',
        'policy_disabled' => 'bool',
        'process_blocked' => 'bool',
        'quarantine_file' => 'bool',
        'quarantine_machine' => 'bool',
        'registry_operation_blocked' => 'bool',
        'rooting' => 'bool',
        'sensor_only' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bootup_safeguard_enabled' => null,
        'critical_process_disabled' => null,
        'detect' => null,
        'fs_operation_blocked' => null,
        'inddet_mask' => null,
        'indicator' => null,
        'kill_parent' => null,
        'kill_process' => null,
        'kill_subprocess' => null,
        'operation_blocked' => null,
        'policy_disabled' => null,
        'process_blocked' => null,
        'quarantine_file' => null,
        'quarantine_machine' => null,
        'registry_operation_blocked' => null,
        'rooting' => null,
        'sensor_only' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bootup_safeguard_enabled' => 'bootup_safeguard_enabled',
        'critical_process_disabled' => 'critical_process_disabled',
        'detect' => 'detect',
        'fs_operation_blocked' => 'fs_operation_blocked',
        'inddet_mask' => 'inddet_mask',
        'indicator' => 'indicator',
        'kill_parent' => 'kill_parent',
        'kill_process' => 'kill_process',
        'kill_subprocess' => 'kill_subprocess',
        'operation_blocked' => 'operation_blocked',
        'policy_disabled' => 'policy_disabled',
        'process_blocked' => 'process_blocked',
        'quarantine_file' => 'quarantine_file',
        'quarantine_machine' => 'quarantine_machine',
        'registry_operation_blocked' => 'registry_operation_blocked',
        'rooting' => 'rooting',
        'sensor_only' => 'sensor_only'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bootup_safeguard_enabled' => 'setBootupSafeguardEnabled',
        'critical_process_disabled' => 'setCriticalProcessDisabled',
        'detect' => 'setDetect',
        'fs_operation_blocked' => 'setFsOperationBlocked',
        'inddet_mask' => 'setInddetMask',
        'indicator' => 'setIndicator',
        'kill_parent' => 'setKillParent',
        'kill_process' => 'setKillProcess',
        'kill_subprocess' => 'setKillSubprocess',
        'operation_blocked' => 'setOperationBlocked',
        'policy_disabled' => 'setPolicyDisabled',
        'process_blocked' => 'setProcessBlocked',
        'quarantine_file' => 'setQuarantineFile',
        'quarantine_machine' => 'setQuarantineMachine',
        'registry_operation_blocked' => 'setRegistryOperationBlocked',
        'rooting' => 'setRooting',
        'sensor_only' => 'setSensorOnly'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bootup_safeguard_enabled' => 'getBootupSafeguardEnabled',
        'critical_process_disabled' => 'getCriticalProcessDisabled',
        'detect' => 'getDetect',
        'fs_operation_blocked' => 'getFsOperationBlocked',
        'inddet_mask' => 'getInddetMask',
        'indicator' => 'getIndicator',
        'kill_parent' => 'getKillParent',
        'kill_process' => 'getKillProcess',
        'kill_subprocess' => 'getKillSubprocess',
        'operation_blocked' => 'getOperationBlocked',
        'policy_disabled' => 'getPolicyDisabled',
        'process_blocked' => 'getProcessBlocked',
        'quarantine_file' => 'getQuarantineFile',
        'quarantine_machine' => 'getQuarantineMachine',
        'registry_operation_blocked' => 'getRegistryOperationBlocked',
        'rooting' => 'getRooting',
        'sensor_only' => 'getSensorOnly'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bootup_safeguard_enabled'] = $data['bootup_safeguard_enabled'] ?? null;
        $this->container['critical_process_disabled'] = $data['critical_process_disabled'] ?? null;
        $this->container['detect'] = $data['detect'] ?? null;
        $this->container['fs_operation_blocked'] = $data['fs_operation_blocked'] ?? null;
        $this->container['inddet_mask'] = $data['inddet_mask'] ?? null;
        $this->container['indicator'] = $data['indicator'] ?? null;
        $this->container['kill_parent'] = $data['kill_parent'] ?? null;
        $this->container['kill_process'] = $data['kill_process'] ?? null;
        $this->container['kill_subprocess'] = $data['kill_subprocess'] ?? null;
        $this->container['operation_blocked'] = $data['operation_blocked'] ?? null;
        $this->container['policy_disabled'] = $data['policy_disabled'] ?? null;
        $this->container['process_blocked'] = $data['process_blocked'] ?? null;
        $this->container['quarantine_file'] = $data['quarantine_file'] ?? null;
        $this->container['quarantine_machine'] = $data['quarantine_machine'] ?? null;
        $this->container['registry_operation_blocked'] = $data['registry_operation_blocked'] ?? null;
        $this->container['rooting'] = $data['rooting'] ?? null;
        $this->container['sensor_only'] = $data['sensor_only'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bootup_safeguard_enabled'] === null) {
            $invalidProperties[] = "'bootup_safeguard_enabled' can't be null";
        }
        if ($this->container['critical_process_disabled'] === null) {
            $invalidProperties[] = "'critical_process_disabled' can't be null";
        }
        if ($this->container['detect'] === null) {
            $invalidProperties[] = "'detect' can't be null";
        }
        if ($this->container['fs_operation_blocked'] === null) {
            $invalidProperties[] = "'fs_operation_blocked' can't be null";
        }
        if ($this->container['inddet_mask'] === null) {
            $invalidProperties[] = "'inddet_mask' can't be null";
        }
        if ($this->container['indicator'] === null) {
            $invalidProperties[] = "'indicator' can't be null";
        }
        if ($this->container['kill_parent'] === null) {
            $invalidProperties[] = "'kill_parent' can't be null";
        }
        if ($this->container['kill_process'] === null) {
            $invalidProperties[] = "'kill_process' can't be null";
        }
        if ($this->container['kill_subprocess'] === null) {
            $invalidProperties[] = "'kill_subprocess' can't be null";
        }
        if ($this->container['operation_blocked'] === null) {
            $invalidProperties[] = "'operation_blocked' can't be null";
        }
        if ($this->container['policy_disabled'] === null) {
            $invalidProperties[] = "'policy_disabled' can't be null";
        }
        if ($this->container['process_blocked'] === null) {
            $invalidProperties[] = "'process_blocked' can't be null";
        }
        if ($this->container['quarantine_file'] === null) {
            $invalidProperties[] = "'quarantine_file' can't be null";
        }
        if ($this->container['quarantine_machine'] === null) {
            $invalidProperties[] = "'quarantine_machine' can't be null";
        }
        if ($this->container['registry_operation_blocked'] === null) {
            $invalidProperties[] = "'registry_operation_blocked' can't be null";
        }
        if ($this->container['rooting'] === null) {
            $invalidProperties[] = "'rooting' can't be null";
        }
        if ($this->container['sensor_only'] === null) {
            $invalidProperties[] = "'sensor_only' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bootup_safeguard_enabled
     *
     * @return bool
     */
    public function getBootupSafeguardEnabled()
    {
        return $this->container['bootup_safeguard_enabled'];
    }

    /**
     * Sets bootup_safeguard_enabled
     *
     * @param bool $bootup_safeguard_enabled bootup_safeguard_enabled
     *
     * @return self
     */
    public function setBootupSafeguardEnabled($bootup_safeguard_enabled)
    {
        $this->container['bootup_safeguard_enabled'] = $bootup_safeguard_enabled;

        return $this;
    }

    /**
     * Gets critical_process_disabled
     *
     * @return bool
     */
    public function getCriticalProcessDisabled()
    {
        return $this->container['critical_process_disabled'];
    }

    /**
     * Sets critical_process_disabled
     *
     * @param bool $critical_process_disabled critical_process_disabled
     *
     * @return self
     */
    public function setCriticalProcessDisabled($critical_process_disabled)
    {
        $this->container['critical_process_disabled'] = $critical_process_disabled;

        return $this;
    }

    /**
     * Gets detect
     *
     * @return bool
     */
    public function getDetect()
    {
        return $this->container['detect'];
    }

    /**
     * Sets detect
     *
     * @param bool $detect detect
     *
     * @return self
     */
    public function setDetect($detect)
    {
        $this->container['detect'] = $detect;

        return $this;
    }

    /**
     * Gets fs_operation_blocked
     *
     * @return bool
     */
    public function getFsOperationBlocked()
    {
        return $this->container['fs_operation_blocked'];
    }

    /**
     * Sets fs_operation_blocked
     *
     * @param bool $fs_operation_blocked fs_operation_blocked
     *
     * @return self
     */
    public function setFsOperationBlocked($fs_operation_blocked)
    {
        $this->container['fs_operation_blocked'] = $fs_operation_blocked;

        return $this;
    }

    /**
     * Gets inddet_mask
     *
     * @return bool
     */
    public function getInddetMask()
    {
        return $this->container['inddet_mask'];
    }

    /**
     * Sets inddet_mask
     *
     * @param bool $inddet_mask inddet_mask
     *
     * @return self
     */
    public function setInddetMask($inddet_mask)
    {
        $this->container['inddet_mask'] = $inddet_mask;

        return $this;
    }

    /**
     * Gets indicator
     *
     * @return bool
     */
    public function getIndicator()
    {
        return $this->container['indicator'];
    }

    /**
     * Sets indicator
     *
     * @param bool $indicator indicator
     *
     * @return self
     */
    public function setIndicator($indicator)
    {
        $this->container['indicator'] = $indicator;

        return $this;
    }

    /**
     * Gets kill_parent
     *
     * @return bool
     */
    public function getKillParent()
    {
        return $this->container['kill_parent'];
    }

    /**
     * Sets kill_parent
     *
     * @param bool $kill_parent kill_parent
     *
     * @return self
     */
    public function setKillParent($kill_parent)
    {
        $this->container['kill_parent'] = $kill_parent;

        return $this;
    }

    /**
     * Gets kill_process
     *
     * @return bool
     */
    public function getKillProcess()
    {
        return $this->container['kill_process'];
    }

    /**
     * Sets kill_process
     *
     * @param bool $kill_process kill_process
     *
     * @return self
     */
    public function setKillProcess($kill_process)
    {
        $this->container['kill_process'] = $kill_process;

        return $this;
    }

    /**
     * Gets kill_subprocess
     *
     * @return bool
     */
    public function getKillSubprocess()
    {
        return $this->container['kill_subprocess'];
    }

    /**
     * Sets kill_subprocess
     *
     * @param bool $kill_subprocess kill_subprocess
     *
     * @return self
     */
    public function setKillSubprocess($kill_subprocess)
    {
        $this->container['kill_subprocess'] = $kill_subprocess;

        return $this;
    }

    /**
     * Gets operation_blocked
     *
     * @return bool
     */
    public function getOperationBlocked()
    {
        return $this->container['operation_blocked'];
    }

    /**
     * Sets operation_blocked
     *
     * @param bool $operation_blocked operation_blocked
     *
     * @return self
     */
    public function setOperationBlocked($operation_blocked)
    {
        $this->container['operation_blocked'] = $operation_blocked;

        return $this;
    }

    /**
     * Gets policy_disabled
     *
     * @return bool
     */
    public function getPolicyDisabled()
    {
        return $this->container['policy_disabled'];
    }

    /**
     * Sets policy_disabled
     *
     * @param bool $policy_disabled policy_disabled
     *
     * @return self
     */
    public function setPolicyDisabled($policy_disabled)
    {
        $this->container['policy_disabled'] = $policy_disabled;

        return $this;
    }

    /**
     * Gets process_blocked
     *
     * @return bool
     */
    public function getProcessBlocked()
    {
        return $this->container['process_blocked'];
    }

    /**
     * Sets process_blocked
     *
     * @param bool $process_blocked process_blocked
     *
     * @return self
     */
    public function setProcessBlocked($process_blocked)
    {
        $this->container['process_blocked'] = $process_blocked;

        return $this;
    }

    /**
     * Gets quarantine_file
     *
     * @return bool
     */
    public function getQuarantineFile()
    {
        return $this->container['quarantine_file'];
    }

    /**
     * Sets quarantine_file
     *
     * @param bool $quarantine_file quarantine_file
     *
     * @return self
     */
    public function setQuarantineFile($quarantine_file)
    {
        $this->container['quarantine_file'] = $quarantine_file;

        return $this;
    }

    /**
     * Gets quarantine_machine
     *
     * @return bool
     */
    public function getQuarantineMachine()
    {
        return $this->container['quarantine_machine'];
    }

    /**
     * Sets quarantine_machine
     *
     * @param bool $quarantine_machine quarantine_machine
     *
     * @return self
     */
    public function setQuarantineMachine($quarantine_machine)
    {
        $this->container['quarantine_machine'] = $quarantine_machine;

        return $this;
    }

    /**
     * Gets registry_operation_blocked
     *
     * @return bool
     */
    public function getRegistryOperationBlocked()
    {
        return $this->container['registry_operation_blocked'];
    }

    /**
     * Sets registry_operation_blocked
     *
     * @param bool $registry_operation_blocked registry_operation_blocked
     *
     * @return self
     */
    public function setRegistryOperationBlocked($registry_operation_blocked)
    {
        $this->container['registry_operation_blocked'] = $registry_operation_blocked;

        return $this;
    }

    /**
     * Gets rooting
     *
     * @return bool
     */
    public function getRooting()
    {
        return $this->container['rooting'];
    }

    /**
     * Sets rooting
     *
     * @param bool $rooting rooting
     *
     * @return self
     */
    public function setRooting($rooting)
    {
        $this->container['rooting'] = $rooting;

        return $this;
    }

    /**
     * Gets sensor_only
     *
     * @return bool
     */
    public function getSensorOnly()
    {
        return $this->container['sensor_only'];
    }

    /**
     * Sets sensor_only
     *
     * @param bool $sensor_only sensor_only
     *
     * @return self
     */
    public function setSensorOnly($sensor_only)
    {
        $this->container['sensor_only'] = $sensor_only;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


