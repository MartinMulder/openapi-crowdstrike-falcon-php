<?php
/**
 * FirewallManagementApiTest
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.eu-1.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.eu-1.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.eu-1.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * FirewallManagementApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FirewallManagementApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for aggregateEvents
     *
     * Aggregate events for customer.
     *
     */
    public function testAggregateEvents()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aggregatePolicyRules
     *
     * Aggregate rules within a policy for customer.
     *
     */
    public function testAggregatePolicyRules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aggregateRuleGroups
     *
     * Aggregate rule groups for customer.
     *
     */
    public function testAggregateRuleGroups()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for aggregateRules
     *
     * Aggregate rules for customer.
     *
     */
    public function testAggregateRules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createRuleGroup
     *
     * Create new rule group on a platform for a customer with a name and description, and return the ID.
     *
     */
    public function testCreateRuleGroup()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deleteRuleGroups
     *
     * Delete rule group entities by ID.
     *
     */
    public function testDeleteRuleGroups()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getEvents
     *
     * Get events entities by ID and optionally version.
     *
     */
    public function testGetEvents()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getFirewallFields
     *
     * Get the firewall field specifications by ID.
     *
     */
    public function testGetFirewallFields()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPlatforms
     *
     * Get platforms by ID, e.g., windows or mac or droid.
     *
     */
    public function testGetPlatforms()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getPolicyContainers
     *
     * Get policy container entities by policy ID.
     *
     */
    public function testGetPolicyContainers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRuleGroups
     *
     * Get rule group entities by ID. These groups do not contain their rule entites, just the rule IDs in precedence order..
     *
     */
    public function testGetRuleGroups()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRules
     *
     * Get rule entities by ID (64-bit unsigned int as decimal string) or Family ID (32-character hexadecimal string).
     *
     */
    public function testGetRules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryEvents
     *
     * Find all event IDs matching the query with filter.
     *
     */
    public function testQueryEvents()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryFirewallFields
     *
     * Get the firewall field specification IDs for the provided platform.
     *
     */
    public function testQueryFirewallFields()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryPlatforms
     *
     * Get the list of platform names.
     *
     */
    public function testQueryPlatforms()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryPolicyRules
     *
     * Find all firewall rule IDs matching the query with filter, and return them in precedence order.
     *
     */
    public function testQueryPolicyRules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryRuleGroups
     *
     * Find all rule group IDs matching the query with filter.
     *
     */
    public function testQueryRuleGroups()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for queryRules
     *
     * Find all rule IDs matching the query with filter.
     *
     */
    public function testQueryRules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updatePolicyContainer
     *
     * Update an identified policy container.
     *
     */
    public function testUpdatePolicyContainer()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for updateRuleGroup
     *
     * Update name, description, or enabled status of a rule group, or create, edit, delete, or reorder rules.
     *
     */
    public function testUpdateRuleGroup()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
