<?php
/**
 * DomainAPIDetectionDocument
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.eu-1.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.eu-1.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.eu-1.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomainAPIDetectionDocument Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DomainAPIDetectionDocument implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'domain.APIDetectionDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adversary_ids' => 'int[]',
        'assigned_to_name' => 'string',
        'assigned_to_uid' => 'string',
        'behaviors' => '\OpenAPI\Client\Model\DetectsindexBehavior[]',
        'cid' => 'string',
        'created_timestamp' => '\DateTime',
        'detection_id' => 'string',
        'device' => '\OpenAPI\Client\Model\DetectsindexDeviceDetailIndexed',
        'email_sent' => 'bool',
        'first_behavior' => '\DateTime',
        'hostinfo' => '\OpenAPI\Client\Model\DetectsindexHostInfo',
        'last_behavior' => '\DateTime',
        'max_confidence' => 'int',
        'max_severity' => 'int',
        'max_severity_displayname' => 'string',
        'overwatch_notes' => 'string',
        'quarantined_files' => '\OpenAPI\Client\Model\DetectsindexQuarantinedFile[]',
        'seconds_to_resolved' => 'int',
        'seconds_to_triaged' => 'int',
        'show_in_ui' => 'bool',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adversary_ids' => null,
        'assigned_to_name' => null,
        'assigned_to_uid' => null,
        'behaviors' => null,
        'cid' => null,
        'created_timestamp' => 'date-time',
        'detection_id' => null,
        'device' => null,
        'email_sent' => null,
        'first_behavior' => 'date-time',
        'hostinfo' => null,
        'last_behavior' => 'date-time',
        'max_confidence' => 'int32',
        'max_severity' => 'int32',
        'max_severity_displayname' => null,
        'overwatch_notes' => null,
        'quarantined_files' => null,
        'seconds_to_resolved' => 'int64',
        'seconds_to_triaged' => 'int64',
        'show_in_ui' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adversary_ids' => 'adversary_ids',
        'assigned_to_name' => 'assigned_to_name',
        'assigned_to_uid' => 'assigned_to_uid',
        'behaviors' => 'behaviors',
        'cid' => 'cid',
        'created_timestamp' => 'created_timestamp',
        'detection_id' => 'detection_id',
        'device' => 'device',
        'email_sent' => 'email_sent',
        'first_behavior' => 'first_behavior',
        'hostinfo' => 'hostinfo',
        'last_behavior' => 'last_behavior',
        'max_confidence' => 'max_confidence',
        'max_severity' => 'max_severity',
        'max_severity_displayname' => 'max_severity_displayname',
        'overwatch_notes' => 'overwatch_notes',
        'quarantined_files' => 'quarantined_files',
        'seconds_to_resolved' => 'seconds_to_resolved',
        'seconds_to_triaged' => 'seconds_to_triaged',
        'show_in_ui' => 'show_in_ui',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adversary_ids' => 'setAdversaryIds',
        'assigned_to_name' => 'setAssignedToName',
        'assigned_to_uid' => 'setAssignedToUid',
        'behaviors' => 'setBehaviors',
        'cid' => 'setCid',
        'created_timestamp' => 'setCreatedTimestamp',
        'detection_id' => 'setDetectionId',
        'device' => 'setDevice',
        'email_sent' => 'setEmailSent',
        'first_behavior' => 'setFirstBehavior',
        'hostinfo' => 'setHostinfo',
        'last_behavior' => 'setLastBehavior',
        'max_confidence' => 'setMaxConfidence',
        'max_severity' => 'setMaxSeverity',
        'max_severity_displayname' => 'setMaxSeverityDisplayname',
        'overwatch_notes' => 'setOverwatchNotes',
        'quarantined_files' => 'setQuarantinedFiles',
        'seconds_to_resolved' => 'setSecondsToResolved',
        'seconds_to_triaged' => 'setSecondsToTriaged',
        'show_in_ui' => 'setShowInUi',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adversary_ids' => 'getAdversaryIds',
        'assigned_to_name' => 'getAssignedToName',
        'assigned_to_uid' => 'getAssignedToUid',
        'behaviors' => 'getBehaviors',
        'cid' => 'getCid',
        'created_timestamp' => 'getCreatedTimestamp',
        'detection_id' => 'getDetectionId',
        'device' => 'getDevice',
        'email_sent' => 'getEmailSent',
        'first_behavior' => 'getFirstBehavior',
        'hostinfo' => 'getHostinfo',
        'last_behavior' => 'getLastBehavior',
        'max_confidence' => 'getMaxConfidence',
        'max_severity' => 'getMaxSeverity',
        'max_severity_displayname' => 'getMaxSeverityDisplayname',
        'overwatch_notes' => 'getOverwatchNotes',
        'quarantined_files' => 'getQuarantinedFiles',
        'seconds_to_resolved' => 'getSecondsToResolved',
        'seconds_to_triaged' => 'getSecondsToTriaged',
        'show_in_ui' => 'getShowInUi',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['adversary_ids'] = $data['adversary_ids'] ?? null;
        $this->container['assigned_to_name'] = $data['assigned_to_name'] ?? null;
        $this->container['assigned_to_uid'] = $data['assigned_to_uid'] ?? null;
        $this->container['behaviors'] = $data['behaviors'] ?? null;
        $this->container['cid'] = $data['cid'] ?? null;
        $this->container['created_timestamp'] = $data['created_timestamp'] ?? null;
        $this->container['detection_id'] = $data['detection_id'] ?? null;
        $this->container['device'] = $data['device'] ?? null;
        $this->container['email_sent'] = $data['email_sent'] ?? null;
        $this->container['first_behavior'] = $data['first_behavior'] ?? null;
        $this->container['hostinfo'] = $data['hostinfo'] ?? null;
        $this->container['last_behavior'] = $data['last_behavior'] ?? null;
        $this->container['max_confidence'] = $data['max_confidence'] ?? null;
        $this->container['max_severity'] = $data['max_severity'] ?? null;
        $this->container['max_severity_displayname'] = $data['max_severity_displayname'] ?? null;
        $this->container['overwatch_notes'] = $data['overwatch_notes'] ?? null;
        $this->container['quarantined_files'] = $data['quarantined_files'] ?? null;
        $this->container['seconds_to_resolved'] = $data['seconds_to_resolved'] ?? null;
        $this->container['seconds_to_triaged'] = $data['seconds_to_triaged'] ?? null;
        $this->container['show_in_ui'] = $data['show_in_ui'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cid'] === null) {
            $invalidProperties[] = "'cid' can't be null";
        }
        if ($this->container['created_timestamp'] === null) {
            $invalidProperties[] = "'created_timestamp' can't be null";
        }
        if ($this->container['detection_id'] === null) {
            $invalidProperties[] = "'detection_id' can't be null";
        }
        if ($this->container['device'] === null) {
            $invalidProperties[] = "'device' can't be null";
        }
        if ($this->container['email_sent'] === null) {
            $invalidProperties[] = "'email_sent' can't be null";
        }
        if ($this->container['first_behavior'] === null) {
            $invalidProperties[] = "'first_behavior' can't be null";
        }
        if ($this->container['hostinfo'] === null) {
            $invalidProperties[] = "'hostinfo' can't be null";
        }
        if ($this->container['last_behavior'] === null) {
            $invalidProperties[] = "'last_behavior' can't be null";
        }
        if ($this->container['max_confidence'] === null) {
            $invalidProperties[] = "'max_confidence' can't be null";
        }
        if ($this->container['max_severity'] === null) {
            $invalidProperties[] = "'max_severity' can't be null";
        }
        if ($this->container['max_severity_displayname'] === null) {
            $invalidProperties[] = "'max_severity_displayname' can't be null";
        }
        if ($this->container['seconds_to_resolved'] === null) {
            $invalidProperties[] = "'seconds_to_resolved' can't be null";
        }
        if ($this->container['seconds_to_triaged'] === null) {
            $invalidProperties[] = "'seconds_to_triaged' can't be null";
        }
        if ($this->container['show_in_ui'] === null) {
            $invalidProperties[] = "'show_in_ui' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adversary_ids
     *
     * @return int[]|null
     */
    public function getAdversaryIds()
    {
        return $this->container['adversary_ids'];
    }

    /**
     * Sets adversary_ids
     *
     * @param int[]|null $adversary_ids adversary_ids
     *
     * @return self
     */
    public function setAdversaryIds($adversary_ids)
    {
        $this->container['adversary_ids'] = $adversary_ids;

        return $this;
    }

    /**
     * Gets assigned_to_name
     *
     * @return string|null
     */
    public function getAssignedToName()
    {
        return $this->container['assigned_to_name'];
    }

    /**
     * Sets assigned_to_name
     *
     * @param string|null $assigned_to_name assigned_to_name
     *
     * @return self
     */
    public function setAssignedToName($assigned_to_name)
    {
        $this->container['assigned_to_name'] = $assigned_to_name;

        return $this;
    }

    /**
     * Gets assigned_to_uid
     *
     * @return string|null
     */
    public function getAssignedToUid()
    {
        return $this->container['assigned_to_uid'];
    }

    /**
     * Sets assigned_to_uid
     *
     * @param string|null $assigned_to_uid assigned_to_uid
     *
     * @return self
     */
    public function setAssignedToUid($assigned_to_uid)
    {
        $this->container['assigned_to_uid'] = $assigned_to_uid;

        return $this;
    }

    /**
     * Gets behaviors
     *
     * @return \OpenAPI\Client\Model\DetectsindexBehavior[]|null
     */
    public function getBehaviors()
    {
        return $this->container['behaviors'];
    }

    /**
     * Sets behaviors
     *
     * @param \OpenAPI\Client\Model\DetectsindexBehavior[]|null $behaviors behaviors
     *
     * @return self
     */
    public function setBehaviors($behaviors)
    {
        $this->container['behaviors'] = $behaviors;

        return $this;
    }

    /**
     * Gets cid
     *
     * @return string
     */
    public function getCid()
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param string $cid cid
     *
     * @return self
     */
    public function setCid($cid)
    {
        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets created_timestamp
     *
     * @return \DateTime
     */
    public function getCreatedTimestamp()
    {
        return $this->container['created_timestamp'];
    }

    /**
     * Sets created_timestamp
     *
     * @param \DateTime $created_timestamp created_timestamp
     *
     * @return self
     */
    public function setCreatedTimestamp($created_timestamp)
    {
        $this->container['created_timestamp'] = $created_timestamp;

        return $this;
    }

    /**
     * Gets detection_id
     *
     * @return string
     */
    public function getDetectionId()
    {
        return $this->container['detection_id'];
    }

    /**
     * Sets detection_id
     *
     * @param string $detection_id detection_id
     *
     * @return self
     */
    public function setDetectionId($detection_id)
    {
        $this->container['detection_id'] = $detection_id;

        return $this;
    }

    /**
     * Gets device
     *
     * @return \OpenAPI\Client\Model\DetectsindexDeviceDetailIndexed
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param \OpenAPI\Client\Model\DetectsindexDeviceDetailIndexed $device device
     *
     * @return self
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets email_sent
     *
     * @return bool
     */
    public function getEmailSent()
    {
        return $this->container['email_sent'];
    }

    /**
     * Sets email_sent
     *
     * @param bool $email_sent email_sent
     *
     * @return self
     */
    public function setEmailSent($email_sent)
    {
        $this->container['email_sent'] = $email_sent;

        return $this;
    }

    /**
     * Gets first_behavior
     *
     * @return \DateTime
     */
    public function getFirstBehavior()
    {
        return $this->container['first_behavior'];
    }

    /**
     * Sets first_behavior
     *
     * @param \DateTime $first_behavior first_behavior
     *
     * @return self
     */
    public function setFirstBehavior($first_behavior)
    {
        $this->container['first_behavior'] = $first_behavior;

        return $this;
    }

    /**
     * Gets hostinfo
     *
     * @return \OpenAPI\Client\Model\DetectsindexHostInfo
     */
    public function getHostinfo()
    {
        return $this->container['hostinfo'];
    }

    /**
     * Sets hostinfo
     *
     * @param \OpenAPI\Client\Model\DetectsindexHostInfo $hostinfo hostinfo
     *
     * @return self
     */
    public function setHostinfo($hostinfo)
    {
        $this->container['hostinfo'] = $hostinfo;

        return $this;
    }

    /**
     * Gets last_behavior
     *
     * @return \DateTime
     */
    public function getLastBehavior()
    {
        return $this->container['last_behavior'];
    }

    /**
     * Sets last_behavior
     *
     * @param \DateTime $last_behavior last_behavior
     *
     * @return self
     */
    public function setLastBehavior($last_behavior)
    {
        $this->container['last_behavior'] = $last_behavior;

        return $this;
    }

    /**
     * Gets max_confidence
     *
     * @return int
     */
    public function getMaxConfidence()
    {
        return $this->container['max_confidence'];
    }

    /**
     * Sets max_confidence
     *
     * @param int $max_confidence max_confidence
     *
     * @return self
     */
    public function setMaxConfidence($max_confidence)
    {
        $this->container['max_confidence'] = $max_confidence;

        return $this;
    }

    /**
     * Gets max_severity
     *
     * @return int
     */
    public function getMaxSeverity()
    {
        return $this->container['max_severity'];
    }

    /**
     * Sets max_severity
     *
     * @param int $max_severity max_severity
     *
     * @return self
     */
    public function setMaxSeverity($max_severity)
    {
        $this->container['max_severity'] = $max_severity;

        return $this;
    }

    /**
     * Gets max_severity_displayname
     *
     * @return string
     */
    public function getMaxSeverityDisplayname()
    {
        return $this->container['max_severity_displayname'];
    }

    /**
     * Sets max_severity_displayname
     *
     * @param string $max_severity_displayname max_severity_displayname
     *
     * @return self
     */
    public function setMaxSeverityDisplayname($max_severity_displayname)
    {
        $this->container['max_severity_displayname'] = $max_severity_displayname;

        return $this;
    }

    /**
     * Gets overwatch_notes
     *
     * @return string|null
     */
    public function getOverwatchNotes()
    {
        return $this->container['overwatch_notes'];
    }

    /**
     * Sets overwatch_notes
     *
     * @param string|null $overwatch_notes overwatch_notes
     *
     * @return self
     */
    public function setOverwatchNotes($overwatch_notes)
    {
        $this->container['overwatch_notes'] = $overwatch_notes;

        return $this;
    }

    /**
     * Gets quarantined_files
     *
     * @return \OpenAPI\Client\Model\DetectsindexQuarantinedFile[]|null
     */
    public function getQuarantinedFiles()
    {
        return $this->container['quarantined_files'];
    }

    /**
     * Sets quarantined_files
     *
     * @param \OpenAPI\Client\Model\DetectsindexQuarantinedFile[]|null $quarantined_files quarantined_files
     *
     * @return self
     */
    public function setQuarantinedFiles($quarantined_files)
    {
        $this->container['quarantined_files'] = $quarantined_files;

        return $this;
    }

    /**
     * Gets seconds_to_resolved
     *
     * @return int
     */
    public function getSecondsToResolved()
    {
        return $this->container['seconds_to_resolved'];
    }

    /**
     * Sets seconds_to_resolved
     *
     * @param int $seconds_to_resolved seconds_to_resolved
     *
     * @return self
     */
    public function setSecondsToResolved($seconds_to_resolved)
    {
        $this->container['seconds_to_resolved'] = $seconds_to_resolved;

        return $this;
    }

    /**
     * Gets seconds_to_triaged
     *
     * @return int
     */
    public function getSecondsToTriaged()
    {
        return $this->container['seconds_to_triaged'];
    }

    /**
     * Sets seconds_to_triaged
     *
     * @param int $seconds_to_triaged seconds_to_triaged
     *
     * @return self
     */
    public function setSecondsToTriaged($seconds_to_triaged)
    {
        $this->container['seconds_to_triaged'] = $seconds_to_triaged;

        return $this;
    }

    /**
     * Gets show_in_ui
     *
     * @return bool
     */
    public function getShowInUi()
    {
        return $this->container['show_in_ui'];
    }

    /**
     * Sets show_in_ui
     *
     * @param bool $show_in_ui show_in_ui
     *
     * @return self
     */
    public function setShowInUi($show_in_ui)
    {
        $this->container['show_in_ui'] = $show_in_ui;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


