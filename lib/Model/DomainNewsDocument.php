<?php
/**
 * DomainNewsDocument
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.eu-1.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.eu-1.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.eu-1.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomainNewsDocument Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DomainNewsDocument implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'domain.NewsDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'active' => 'bool',
        'actors' => '\OpenAPI\Client\Model\DomainSimpleActor[]',
        'attachments' => '\OpenAPI\Client\Model\DomainFile[]',
        'created_date' => 'int',
        'description' => 'string',
        'entitlements' => '\OpenAPI\Client\Model\DomainEntity[]',
        'id' => 'int',
        'image' => '\OpenAPI\Client\Model\DomainImage',
        'last_modified_date' => 'int',
        'motivations' => '\OpenAPI\Client\Model\DomainEntity[]',
        'name' => 'string',
        'notify_users' => 'bool',
        'rich_text_description' => 'string',
        'short_description' => 'string',
        'slug' => 'string',
        'sub_type' => '\OpenAPI\Client\Model\DomainEntity',
        'tags' => '\OpenAPI\Client\Model\DomainEntity[]',
        'target_countries' => '\OpenAPI\Client\Model\DomainEntity[]',
        'target_industries' => '\OpenAPI\Client\Model\DomainEntity[]',
        'thumbnail' => '\OpenAPI\Client\Model\DomainImage',
        'topic' => '\OpenAPI\Client\Model\DomainEntity',
        'type' => '\OpenAPI\Client\Model\DomainEntity',
        'url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'active' => null,
        'actors' => null,
        'attachments' => null,
        'created_date' => 'int64',
        'description' => null,
        'entitlements' => null,
        'id' => 'int64',
        'image' => null,
        'last_modified_date' => 'int64',
        'motivations' => null,
        'name' => null,
        'notify_users' => null,
        'rich_text_description' => null,
        'short_description' => null,
        'slug' => null,
        'sub_type' => null,
        'tags' => null,
        'target_countries' => null,
        'target_industries' => null,
        'thumbnail' => null,
        'topic' => null,
        'type' => null,
        'url' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
        'actors' => 'actors',
        'attachments' => 'attachments',
        'created_date' => 'created_date',
        'description' => 'description',
        'entitlements' => 'entitlements',
        'id' => 'id',
        'image' => 'image',
        'last_modified_date' => 'last_modified_date',
        'motivations' => 'motivations',
        'name' => 'name',
        'notify_users' => 'notify_users',
        'rich_text_description' => 'rich_text_description',
        'short_description' => 'short_description',
        'slug' => 'slug',
        'sub_type' => 'sub_type',
        'tags' => 'tags',
        'target_countries' => 'target_countries',
        'target_industries' => 'target_industries',
        'thumbnail' => 'thumbnail',
        'topic' => 'topic',
        'type' => 'type',
        'url' => 'url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'actors' => 'setActors',
        'attachments' => 'setAttachments',
        'created_date' => 'setCreatedDate',
        'description' => 'setDescription',
        'entitlements' => 'setEntitlements',
        'id' => 'setId',
        'image' => 'setImage',
        'last_modified_date' => 'setLastModifiedDate',
        'motivations' => 'setMotivations',
        'name' => 'setName',
        'notify_users' => 'setNotifyUsers',
        'rich_text_description' => 'setRichTextDescription',
        'short_description' => 'setShortDescription',
        'slug' => 'setSlug',
        'sub_type' => 'setSubType',
        'tags' => 'setTags',
        'target_countries' => 'setTargetCountries',
        'target_industries' => 'setTargetIndustries',
        'thumbnail' => 'setThumbnail',
        'topic' => 'setTopic',
        'type' => 'setType',
        'url' => 'setUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'actors' => 'getActors',
        'attachments' => 'getAttachments',
        'created_date' => 'getCreatedDate',
        'description' => 'getDescription',
        'entitlements' => 'getEntitlements',
        'id' => 'getId',
        'image' => 'getImage',
        'last_modified_date' => 'getLastModifiedDate',
        'motivations' => 'getMotivations',
        'name' => 'getName',
        'notify_users' => 'getNotifyUsers',
        'rich_text_description' => 'getRichTextDescription',
        'short_description' => 'getShortDescription',
        'slug' => 'getSlug',
        'sub_type' => 'getSubType',
        'tags' => 'getTags',
        'target_countries' => 'getTargetCountries',
        'target_industries' => 'getTargetIndustries',
        'thumbnail' => 'getThumbnail',
        'topic' => 'getTopic',
        'type' => 'getType',
        'url' => 'getUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = $data['active'] ?? null;
        $this->container['actors'] = $data['actors'] ?? null;
        $this->container['attachments'] = $data['attachments'] ?? null;
        $this->container['created_date'] = $data['created_date'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['entitlements'] = $data['entitlements'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['last_modified_date'] = $data['last_modified_date'] ?? null;
        $this->container['motivations'] = $data['motivations'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['notify_users'] = $data['notify_users'] ?? null;
        $this->container['rich_text_description'] = $data['rich_text_description'] ?? null;
        $this->container['short_description'] = $data['short_description'] ?? null;
        $this->container['slug'] = $data['slug'] ?? null;
        $this->container['sub_type'] = $data['sub_type'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['target_countries'] = $data['target_countries'] ?? null;
        $this->container['target_industries'] = $data['target_industries'] ?? null;
        $this->container['thumbnail'] = $data['thumbnail'] ?? null;
        $this->container['topic'] = $data['topic'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['actors'] === null) {
            $invalidProperties[] = "'actors' can't be null";
        }
        if ($this->container['created_date'] === null) {
            $invalidProperties[] = "'created_date' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['last_modified_date'] === null) {
            $invalidProperties[] = "'last_modified_date' can't be null";
        }
        if ($this->container['motivations'] === null) {
            $invalidProperties[] = "'motivations' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ($this->container['tags'] === null) {
            $invalidProperties[] = "'tags' can't be null";
        }
        if ($this->container['target_countries'] === null) {
            $invalidProperties[] = "'target_countries' can't be null";
        }
        if ($this->container['target_industries'] === null) {
            $invalidProperties[] = "'target_industries' can't be null";
        }
        if ($this->container['thumbnail'] === null) {
            $invalidProperties[] = "'thumbnail' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets actors
     *
     * @return \OpenAPI\Client\Model\DomainSimpleActor[]
     */
    public function getActors()
    {
        return $this->container['actors'];
    }

    /**
     * Sets actors
     *
     * @param \OpenAPI\Client\Model\DomainSimpleActor[] $actors actors
     *
     * @return self
     */
    public function setActors($actors)
    {
        $this->container['actors'] = $actors;

        return $this;
    }

    /**
     * Gets attachments
     *
     * @return \OpenAPI\Client\Model\DomainFile[]|null
     */
    public function getAttachments()
    {
        return $this->container['attachments'];
    }

    /**
     * Sets attachments
     *
     * @param \OpenAPI\Client\Model\DomainFile[]|null $attachments attachments
     *
     * @return self
     */
    public function setAttachments($attachments)
    {
        $this->container['attachments'] = $attachments;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return int
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param int $created_date created_date
     *
     * @return self
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets entitlements
     *
     * @return \OpenAPI\Client\Model\DomainEntity[]|null
     */
    public function getEntitlements()
    {
        return $this->container['entitlements'];
    }

    /**
     * Sets entitlements
     *
     * @param \OpenAPI\Client\Model\DomainEntity[]|null $entitlements entitlements
     *
     * @return self
     */
    public function setEntitlements($entitlements)
    {
        $this->container['entitlements'] = $entitlements;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \OpenAPI\Client\Model\DomainImage|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \OpenAPI\Client\Model\DomainImage|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return int
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param int $last_modified_date last_modified_date
     *
     * @return self
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets motivations
     *
     * @return \OpenAPI\Client\Model\DomainEntity[]
     */
    public function getMotivations()
    {
        return $this->container['motivations'];
    }

    /**
     * Sets motivations
     *
     * @param \OpenAPI\Client\Model\DomainEntity[] $motivations motivations
     *
     * @return self
     */
    public function setMotivations($motivations)
    {
        $this->container['motivations'] = $motivations;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notify_users
     *
     * @return bool|null
     */
    public function getNotifyUsers()
    {
        return $this->container['notify_users'];
    }

    /**
     * Sets notify_users
     *
     * @param bool|null $notify_users notify_users
     *
     * @return self
     */
    public function setNotifyUsers($notify_users)
    {
        $this->container['notify_users'] = $notify_users;

        return $this;
    }

    /**
     * Gets rich_text_description
     *
     * @return string|null
     */
    public function getRichTextDescription()
    {
        return $this->container['rich_text_description'];
    }

    /**
     * Sets rich_text_description
     *
     * @param string|null $rich_text_description rich_text_description
     *
     * @return self
     */
    public function setRichTextDescription($rich_text_description)
    {
        $this->container['rich_text_description'] = $rich_text_description;

        return $this;
    }

    /**
     * Gets short_description
     *
     * @return string|null
     */
    public function getShortDescription()
    {
        return $this->container['short_description'];
    }

    /**
     * Sets short_description
     *
     * @param string|null $short_description short_description
     *
     * @return self
     */
    public function setShortDescription($short_description)
    {
        $this->container['short_description'] = $short_description;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return \OpenAPI\Client\Model\DomainEntity|null
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param \OpenAPI\Client\Model\DomainEntity|null $sub_type sub_type
     *
     * @return self
     */
    public function setSubType($sub_type)
    {
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \OpenAPI\Client\Model\DomainEntity[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \OpenAPI\Client\Model\DomainEntity[] $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets target_countries
     *
     * @return \OpenAPI\Client\Model\DomainEntity[]
     */
    public function getTargetCountries()
    {
        return $this->container['target_countries'];
    }

    /**
     * Sets target_countries
     *
     * @param \OpenAPI\Client\Model\DomainEntity[] $target_countries target_countries
     *
     * @return self
     */
    public function setTargetCountries($target_countries)
    {
        $this->container['target_countries'] = $target_countries;

        return $this;
    }

    /**
     * Gets target_industries
     *
     * @return \OpenAPI\Client\Model\DomainEntity[]
     */
    public function getTargetIndustries()
    {
        return $this->container['target_industries'];
    }

    /**
     * Sets target_industries
     *
     * @param \OpenAPI\Client\Model\DomainEntity[] $target_industries target_industries
     *
     * @return self
     */
    public function setTargetIndustries($target_industries)
    {
        $this->container['target_industries'] = $target_industries;

        return $this;
    }

    /**
     * Gets thumbnail
     *
     * @return \OpenAPI\Client\Model\DomainImage
     */
    public function getThumbnail()
    {
        return $this->container['thumbnail'];
    }

    /**
     * Sets thumbnail
     *
     * @param \OpenAPI\Client\Model\DomainImage $thumbnail thumbnail
     *
     * @return self
     */
    public function setThumbnail($thumbnail)
    {
        $this->container['thumbnail'] = $thumbnail;

        return $this;
    }

    /**
     * Gets topic
     *
     * @return \OpenAPI\Client\Model\DomainEntity|null
     */
    public function getTopic()
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param \OpenAPI\Client\Model\DomainEntity|null $topic topic
     *
     * @return self
     */
    public function setTopic($topic)
    {
        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\DomainEntity|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\DomainEntity|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


