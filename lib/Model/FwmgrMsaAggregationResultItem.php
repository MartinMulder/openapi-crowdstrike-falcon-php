<?php
/**
 * FwmgrMsaAggregationResultItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.eu-1.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.eu-1.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.eu-1.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FwmgrMsaAggregationResultItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class FwmgrMsaAggregationResultItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'fwmgr.msa.AggregationResultItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'count' => 'int',
        'from' => 'double',
        'key_as_string' => 'string',
        'label' => 'object',
        'string_from' => 'string',
        'string_to' => 'string',
        'sub_aggregates' => '\OpenAPI\Client\Model\FwmgrMsaAggregationResult[]',
        'to' => 'double',
        'value' => 'double',
        'value_as_string' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'count' => 'int64',
        'from' => 'double',
        'key_as_string' => null,
        'label' => null,
        'string_from' => null,
        'string_to' => null,
        'sub_aggregates' => null,
        'to' => 'double',
        'value' => 'double',
        'value_as_string' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'count' => 'count',
        'from' => 'from',
        'key_as_string' => 'key_as_string',
        'label' => 'label',
        'string_from' => 'string_from',
        'string_to' => 'string_to',
        'sub_aggregates' => 'sub_aggregates',
        'to' => 'to',
        'value' => 'value',
        'value_as_string' => 'value_as_string'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'count' => 'setCount',
        'from' => 'setFrom',
        'key_as_string' => 'setKeyAsString',
        'label' => 'setLabel',
        'string_from' => 'setStringFrom',
        'string_to' => 'setStringTo',
        'sub_aggregates' => 'setSubAggregates',
        'to' => 'setTo',
        'value' => 'setValue',
        'value_as_string' => 'setValueAsString'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'count' => 'getCount',
        'from' => 'getFrom',
        'key_as_string' => 'getKeyAsString',
        'label' => 'getLabel',
        'string_from' => 'getStringFrom',
        'string_to' => 'getStringTo',
        'sub_aggregates' => 'getSubAggregates',
        'to' => 'getTo',
        'value' => 'getValue',
        'value_as_string' => 'getValueAsString'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['count'] = $data['count'] ?? null;
        $this->container['from'] = $data['from'] ?? null;
        $this->container['key_as_string'] = $data['key_as_string'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['string_from'] = $data['string_from'] ?? null;
        $this->container['string_to'] = $data['string_to'] ?? null;
        $this->container['sub_aggregates'] = $data['sub_aggregates'] ?? null;
        $this->container['to'] = $data['to'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
        $this->container['value_as_string'] = $data['value_as_string'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['count'] === null) {
            $invalidProperties[] = "'count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count count
     *
     * @return self
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets from
     *
     * @return double|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param double|null $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets key_as_string
     *
     * @return string|null
     */
    public function getKeyAsString()
    {
        return $this->container['key_as_string'];
    }

    /**
     * Sets key_as_string
     *
     * @param string|null $key_as_string key_as_string
     *
     * @return self
     */
    public function setKeyAsString($key_as_string)
    {
        $this->container['key_as_string'] = $key_as_string;

        return $this;
    }

    /**
     * Gets label
     *
     * @return object|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param object|null $label label
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets string_from
     *
     * @return string|null
     */
    public function getStringFrom()
    {
        return $this->container['string_from'];
    }

    /**
     * Sets string_from
     *
     * @param string|null $string_from string_from
     *
     * @return self
     */
    public function setStringFrom($string_from)
    {
        $this->container['string_from'] = $string_from;

        return $this;
    }

    /**
     * Gets string_to
     *
     * @return string|null
     */
    public function getStringTo()
    {
        return $this->container['string_to'];
    }

    /**
     * Sets string_to
     *
     * @param string|null $string_to string_to
     *
     * @return self
     */
    public function setStringTo($string_to)
    {
        $this->container['string_to'] = $string_to;

        return $this;
    }

    /**
     * Gets sub_aggregates
     *
     * @return \OpenAPI\Client\Model\FwmgrMsaAggregationResult[]|null
     */
    public function getSubAggregates()
    {
        return $this->container['sub_aggregates'];
    }

    /**
     * Sets sub_aggregates
     *
     * @param \OpenAPI\Client\Model\FwmgrMsaAggregationResult[]|null $sub_aggregates sub_aggregates
     *
     * @return self
     */
    public function setSubAggregates($sub_aggregates)
    {
        $this->container['sub_aggregates'] = $sub_aggregates;

        return $this;
    }

    /**
     * Gets to
     *
     * @return double|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param double|null $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets value
     *
     * @return double|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param double|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets value_as_string
     *
     * @return string|null
     */
    public function getValueAsString()
    {
        return $this->container['value_as_string'];
    }

    /**
     * Sets value_as_string
     *
     * @param string|null $value_as_string value_as_string
     *
     * @return self
     */
    public function setValueAsString($value_as_string)
    {
        $this->container['value_as_string'] = $value_as_string;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


