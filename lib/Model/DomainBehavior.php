<?php
/**
 * DomainBehavior
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.eu-1.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.eu-1.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.eu-1.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomainBehavior Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DomainBehavior implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'domain.Behavior';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'aid' => 'string',
        'behavior_id' => 'string',
        'cid' => 'string',
        'cmdline' => 'string',
        'compound_tto' => 'string',
        'detection_ids' => 'string[]',
        'display_name' => 'string',
        'domain' => 'string',
        'filepath' => 'string',
        'incident_id' => 'string',
        'incident_ids' => 'string[]',
        'ioc_source' => 'string',
        'ioc_type' => 'string',
        'ioc_value' => 'string',
        'objective' => 'string',
        'pattern_disposition' => 'int',
        'pattern_disposition_details' => '\OpenAPI\Client\Model\CloudontologyPatternDisposition',
        'pattern_id' => 'int',
        'sha256' => 'string',
        'tactic' => 'string',
        'tactic_id' => 'string',
        'technique' => 'string',
        'technique_id' => 'string',
        'template_instance_id' => 'int',
        'timestamp' => '\DateTime',
        'user_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'aid' => null,
        'behavior_id' => null,
        'cid' => null,
        'cmdline' => null,
        'compound_tto' => null,
        'detection_ids' => null,
        'display_name' => null,
        'domain' => null,
        'filepath' => null,
        'incident_id' => null,
        'incident_ids' => null,
        'ioc_source' => null,
        'ioc_type' => null,
        'ioc_value' => null,
        'objective' => null,
        'pattern_disposition' => 'int32',
        'pattern_disposition_details' => null,
        'pattern_id' => 'int32',
        'sha256' => null,
        'tactic' => null,
        'tactic_id' => null,
        'technique' => null,
        'technique_id' => null,
        'template_instance_id' => 'int32',
        'timestamp' => 'date-time',
        'user_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aid' => 'aid',
        'behavior_id' => 'behavior_id',
        'cid' => 'cid',
        'cmdline' => 'cmdline',
        'compound_tto' => 'compound_tto',
        'detection_ids' => 'detection_ids',
        'display_name' => 'display_name',
        'domain' => 'domain',
        'filepath' => 'filepath',
        'incident_id' => 'incident_id',
        'incident_ids' => 'incident_ids',
        'ioc_source' => 'ioc_source',
        'ioc_type' => 'ioc_type',
        'ioc_value' => 'ioc_value',
        'objective' => 'objective',
        'pattern_disposition' => 'pattern_disposition',
        'pattern_disposition_details' => 'pattern_disposition_details',
        'pattern_id' => 'pattern_id',
        'sha256' => 'sha256',
        'tactic' => 'tactic',
        'tactic_id' => 'tactic_id',
        'technique' => 'technique',
        'technique_id' => 'technique_id',
        'template_instance_id' => 'template_instance_id',
        'timestamp' => 'timestamp',
        'user_name' => 'user_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aid' => 'setAid',
        'behavior_id' => 'setBehaviorId',
        'cid' => 'setCid',
        'cmdline' => 'setCmdline',
        'compound_tto' => 'setCompoundTto',
        'detection_ids' => 'setDetectionIds',
        'display_name' => 'setDisplayName',
        'domain' => 'setDomain',
        'filepath' => 'setFilepath',
        'incident_id' => 'setIncidentId',
        'incident_ids' => 'setIncidentIds',
        'ioc_source' => 'setIocSource',
        'ioc_type' => 'setIocType',
        'ioc_value' => 'setIocValue',
        'objective' => 'setObjective',
        'pattern_disposition' => 'setPatternDisposition',
        'pattern_disposition_details' => 'setPatternDispositionDetails',
        'pattern_id' => 'setPatternId',
        'sha256' => 'setSha256',
        'tactic' => 'setTactic',
        'tactic_id' => 'setTacticId',
        'technique' => 'setTechnique',
        'technique_id' => 'setTechniqueId',
        'template_instance_id' => 'setTemplateInstanceId',
        'timestamp' => 'setTimestamp',
        'user_name' => 'setUserName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aid' => 'getAid',
        'behavior_id' => 'getBehaviorId',
        'cid' => 'getCid',
        'cmdline' => 'getCmdline',
        'compound_tto' => 'getCompoundTto',
        'detection_ids' => 'getDetectionIds',
        'display_name' => 'getDisplayName',
        'domain' => 'getDomain',
        'filepath' => 'getFilepath',
        'incident_id' => 'getIncidentId',
        'incident_ids' => 'getIncidentIds',
        'ioc_source' => 'getIocSource',
        'ioc_type' => 'getIocType',
        'ioc_value' => 'getIocValue',
        'objective' => 'getObjective',
        'pattern_disposition' => 'getPatternDisposition',
        'pattern_disposition_details' => 'getPatternDispositionDetails',
        'pattern_id' => 'getPatternId',
        'sha256' => 'getSha256',
        'tactic' => 'getTactic',
        'tactic_id' => 'getTacticId',
        'technique' => 'getTechnique',
        'technique_id' => 'getTechniqueId',
        'template_instance_id' => 'getTemplateInstanceId',
        'timestamp' => 'getTimestamp',
        'user_name' => 'getUserName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aid'] = $data['aid'] ?? null;
        $this->container['behavior_id'] = $data['behavior_id'] ?? null;
        $this->container['cid'] = $data['cid'] ?? null;
        $this->container['cmdline'] = $data['cmdline'] ?? null;
        $this->container['compound_tto'] = $data['compound_tto'] ?? null;
        $this->container['detection_ids'] = $data['detection_ids'] ?? null;
        $this->container['display_name'] = $data['display_name'] ?? null;
        $this->container['domain'] = $data['domain'] ?? null;
        $this->container['filepath'] = $data['filepath'] ?? null;
        $this->container['incident_id'] = $data['incident_id'] ?? null;
        $this->container['incident_ids'] = $data['incident_ids'] ?? null;
        $this->container['ioc_source'] = $data['ioc_source'] ?? null;
        $this->container['ioc_type'] = $data['ioc_type'] ?? null;
        $this->container['ioc_value'] = $data['ioc_value'] ?? null;
        $this->container['objective'] = $data['objective'] ?? null;
        $this->container['pattern_disposition'] = $data['pattern_disposition'] ?? null;
        $this->container['pattern_disposition_details'] = $data['pattern_disposition_details'] ?? null;
        $this->container['pattern_id'] = $data['pattern_id'] ?? null;
        $this->container['sha256'] = $data['sha256'] ?? null;
        $this->container['tactic'] = $data['tactic'] ?? null;
        $this->container['tactic_id'] = $data['tactic_id'] ?? null;
        $this->container['technique'] = $data['technique'] ?? null;
        $this->container['technique_id'] = $data['technique_id'] ?? null;
        $this->container['template_instance_id'] = $data['template_instance_id'] ?? null;
        $this->container['timestamp'] = $data['timestamp'] ?? null;
        $this->container['user_name'] = $data['user_name'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['pattern_id'] === null) {
            $invalidProperties[] = "'pattern_id' can't be null";
        }
        if ($this->container['template_instance_id'] === null) {
            $invalidProperties[] = "'template_instance_id' can't be null";
        }
        if ($this->container['timestamp'] === null) {
            $invalidProperties[] = "'timestamp' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aid
     *
     * @return string|null
     */
    public function getAid()
    {
        return $this->container['aid'];
    }

    /**
     * Sets aid
     *
     * @param string|null $aid aid
     *
     * @return self
     */
    public function setAid($aid)
    {
        $this->container['aid'] = $aid;

        return $this;
    }

    /**
     * Gets behavior_id
     *
     * @return string|null
     */
    public function getBehaviorId()
    {
        return $this->container['behavior_id'];
    }

    /**
     * Sets behavior_id
     *
     * @param string|null $behavior_id behavior_id
     *
     * @return self
     */
    public function setBehaviorId($behavior_id)
    {
        $this->container['behavior_id'] = $behavior_id;

        return $this;
    }

    /**
     * Gets cid
     *
     * @return string|null
     */
    public function getCid()
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param string|null $cid cid
     *
     * @return self
     */
    public function setCid($cid)
    {
        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets cmdline
     *
     * @return string|null
     */
    public function getCmdline()
    {
        return $this->container['cmdline'];
    }

    /**
     * Sets cmdline
     *
     * @param string|null $cmdline cmdline
     *
     * @return self
     */
    public function setCmdline($cmdline)
    {
        $this->container['cmdline'] = $cmdline;

        return $this;
    }

    /**
     * Gets compound_tto
     *
     * @return string|null
     */
    public function getCompoundTto()
    {
        return $this->container['compound_tto'];
    }

    /**
     * Sets compound_tto
     *
     * @param string|null $compound_tto compound_tto
     *
     * @return self
     */
    public function setCompoundTto($compound_tto)
    {
        $this->container['compound_tto'] = $compound_tto;

        return $this;
    }

    /**
     * Gets detection_ids
     *
     * @return string[]|null
     */
    public function getDetectionIds()
    {
        return $this->container['detection_ids'];
    }

    /**
     * Sets detection_ids
     *
     * @param string[]|null $detection_ids detection_ids
     *
     * @return self
     */
    public function setDetectionIds($detection_ids)
    {
        $this->container['detection_ids'] = $detection_ids;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string|null
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string|null $domain domain
     *
     * @return self
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets filepath
     *
     * @return string|null
     */
    public function getFilepath()
    {
        return $this->container['filepath'];
    }

    /**
     * Sets filepath
     *
     * @param string|null $filepath filepath
     *
     * @return self
     */
    public function setFilepath($filepath)
    {
        $this->container['filepath'] = $filepath;

        return $this;
    }

    /**
     * Gets incident_id
     *
     * @return string|null
     */
    public function getIncidentId()
    {
        return $this->container['incident_id'];
    }

    /**
     * Sets incident_id
     *
     * @param string|null $incident_id incident_id
     *
     * @return self
     */
    public function setIncidentId($incident_id)
    {
        $this->container['incident_id'] = $incident_id;

        return $this;
    }

    /**
     * Gets incident_ids
     *
     * @return string[]|null
     */
    public function getIncidentIds()
    {
        return $this->container['incident_ids'];
    }

    /**
     * Sets incident_ids
     *
     * @param string[]|null $incident_ids incident_ids
     *
     * @return self
     */
    public function setIncidentIds($incident_ids)
    {
        $this->container['incident_ids'] = $incident_ids;

        return $this;
    }

    /**
     * Gets ioc_source
     *
     * @return string|null
     */
    public function getIocSource()
    {
        return $this->container['ioc_source'];
    }

    /**
     * Sets ioc_source
     *
     * @param string|null $ioc_source ioc_source
     *
     * @return self
     */
    public function setIocSource($ioc_source)
    {
        $this->container['ioc_source'] = $ioc_source;

        return $this;
    }

    /**
     * Gets ioc_type
     *
     * @return string|null
     */
    public function getIocType()
    {
        return $this->container['ioc_type'];
    }

    /**
     * Sets ioc_type
     *
     * @param string|null $ioc_type ioc_type
     *
     * @return self
     */
    public function setIocType($ioc_type)
    {
        $this->container['ioc_type'] = $ioc_type;

        return $this;
    }

    /**
     * Gets ioc_value
     *
     * @return string|null
     */
    public function getIocValue()
    {
        return $this->container['ioc_value'];
    }

    /**
     * Sets ioc_value
     *
     * @param string|null $ioc_value ioc_value
     *
     * @return self
     */
    public function setIocValue($ioc_value)
    {
        $this->container['ioc_value'] = $ioc_value;

        return $this;
    }

    /**
     * Gets objective
     *
     * @return string|null
     */
    public function getObjective()
    {
        return $this->container['objective'];
    }

    /**
     * Sets objective
     *
     * @param string|null $objective objective
     *
     * @return self
     */
    public function setObjective($objective)
    {
        $this->container['objective'] = $objective;

        return $this;
    }

    /**
     * Gets pattern_disposition
     *
     * @return int|null
     */
    public function getPatternDisposition()
    {
        return $this->container['pattern_disposition'];
    }

    /**
     * Sets pattern_disposition
     *
     * @param int|null $pattern_disposition pattern_disposition
     *
     * @return self
     */
    public function setPatternDisposition($pattern_disposition)
    {
        $this->container['pattern_disposition'] = $pattern_disposition;

        return $this;
    }

    /**
     * Gets pattern_disposition_details
     *
     * @return \OpenAPI\Client\Model\CloudontologyPatternDisposition|null
     */
    public function getPatternDispositionDetails()
    {
        return $this->container['pattern_disposition_details'];
    }

    /**
     * Sets pattern_disposition_details
     *
     * @param \OpenAPI\Client\Model\CloudontologyPatternDisposition|null $pattern_disposition_details pattern_disposition_details
     *
     * @return self
     */
    public function setPatternDispositionDetails($pattern_disposition_details)
    {
        $this->container['pattern_disposition_details'] = $pattern_disposition_details;

        return $this;
    }

    /**
     * Gets pattern_id
     *
     * @return int
     */
    public function getPatternId()
    {
        return $this->container['pattern_id'];
    }

    /**
     * Sets pattern_id
     *
     * @param int $pattern_id pattern_id
     *
     * @return self
     */
    public function setPatternId($pattern_id)
    {
        $this->container['pattern_id'] = $pattern_id;

        return $this;
    }

    /**
     * Gets sha256
     *
     * @return string|null
     */
    public function getSha256()
    {
        return $this->container['sha256'];
    }

    /**
     * Sets sha256
     *
     * @param string|null $sha256 sha256
     *
     * @return self
     */
    public function setSha256($sha256)
    {
        $this->container['sha256'] = $sha256;

        return $this;
    }

    /**
     * Gets tactic
     *
     * @return string|null
     */
    public function getTactic()
    {
        return $this->container['tactic'];
    }

    /**
     * Sets tactic
     *
     * @param string|null $tactic tactic
     *
     * @return self
     */
    public function setTactic($tactic)
    {
        $this->container['tactic'] = $tactic;

        return $this;
    }

    /**
     * Gets tactic_id
     *
     * @return string|null
     */
    public function getTacticId()
    {
        return $this->container['tactic_id'];
    }

    /**
     * Sets tactic_id
     *
     * @param string|null $tactic_id tactic_id
     *
     * @return self
     */
    public function setTacticId($tactic_id)
    {
        $this->container['tactic_id'] = $tactic_id;

        return $this;
    }

    /**
     * Gets technique
     *
     * @return string|null
     */
    public function getTechnique()
    {
        return $this->container['technique'];
    }

    /**
     * Sets technique
     *
     * @param string|null $technique technique
     *
     * @return self
     */
    public function setTechnique($technique)
    {
        $this->container['technique'] = $technique;

        return $this;
    }

    /**
     * Gets technique_id
     *
     * @return string|null
     */
    public function getTechniqueId()
    {
        return $this->container['technique_id'];
    }

    /**
     * Sets technique_id
     *
     * @param string|null $technique_id technique_id
     *
     * @return self
     */
    public function setTechniqueId($technique_id)
    {
        $this->container['technique_id'] = $technique_id;

        return $this;
    }

    /**
     * Gets template_instance_id
     *
     * @return int
     */
    public function getTemplateInstanceId()
    {
        return $this->container['template_instance_id'];
    }

    /**
     * Sets template_instance_id
     *
     * @param int $template_instance_id template_instance_id
     *
     * @return self
     */
    public function setTemplateInstanceId($template_instance_id)
    {
        $this->container['template_instance_id'] = $template_instance_id;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return \DateTime
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param \DateTime $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name user_name
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


