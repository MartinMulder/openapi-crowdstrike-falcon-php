<?php
/**
 * DomainPublicIndicatorV3
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.eu-1.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.eu-1.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.eu-1.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomainPublicIndicatorV3 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DomainPublicIndicatorV3 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'domain.PublicIndicatorV3';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_marker' => 'string',
        'actors' => 'string[]',
        'deleted' => 'bool',
        'domain_types' => 'string[]',
        'id' => 'string',
        'indicator' => 'string',
        'ip_address_types' => 'string[]',
        'kill_chains' => 'string[]',
        'labels' => '\OpenAPI\Client\Model\DomainCSIXLabel[]',
        'last_updated' => 'int',
        'malicious_confidence' => 'string',
        'malware_families' => 'string[]',
        'published_date' => 'int',
        'relations' => '\OpenAPI\Client\Model\DomainCSIXRelation[]',
        'reports' => 'string[]',
        'targets' => 'string[]',
        'threat_types' => 'string[]',
        'type' => 'string',
        'vulnerabilities' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_marker' => null,
        'actors' => null,
        'deleted' => null,
        'domain_types' => null,
        'id' => null,
        'indicator' => null,
        'ip_address_types' => null,
        'kill_chains' => null,
        'labels' => null,
        'last_updated' => 'int64',
        'malicious_confidence' => null,
        'malware_families' => null,
        'published_date' => 'int64',
        'relations' => null,
        'reports' => null,
        'targets' => null,
        'threat_types' => null,
        'type' => null,
        'vulnerabilities' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_marker' => '_marker',
        'actors' => 'actors',
        'deleted' => 'deleted',
        'domain_types' => 'domain_types',
        'id' => 'id',
        'indicator' => 'indicator',
        'ip_address_types' => 'ip_address_types',
        'kill_chains' => 'kill_chains',
        'labels' => 'labels',
        'last_updated' => 'last_updated',
        'malicious_confidence' => 'malicious_confidence',
        'malware_families' => 'malware_families',
        'published_date' => 'published_date',
        'relations' => 'relations',
        'reports' => 'reports',
        'targets' => 'targets',
        'threat_types' => 'threat_types',
        'type' => 'type',
        'vulnerabilities' => 'vulnerabilities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_marker' => 'setMarker',
        'actors' => 'setActors',
        'deleted' => 'setDeleted',
        'domain_types' => 'setDomainTypes',
        'id' => 'setId',
        'indicator' => 'setIndicator',
        'ip_address_types' => 'setIpAddressTypes',
        'kill_chains' => 'setKillChains',
        'labels' => 'setLabels',
        'last_updated' => 'setLastUpdated',
        'malicious_confidence' => 'setMaliciousConfidence',
        'malware_families' => 'setMalwareFamilies',
        'published_date' => 'setPublishedDate',
        'relations' => 'setRelations',
        'reports' => 'setReports',
        'targets' => 'setTargets',
        'threat_types' => 'setThreatTypes',
        'type' => 'setType',
        'vulnerabilities' => 'setVulnerabilities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_marker' => 'getMarker',
        'actors' => 'getActors',
        'deleted' => 'getDeleted',
        'domain_types' => 'getDomainTypes',
        'id' => 'getId',
        'indicator' => 'getIndicator',
        'ip_address_types' => 'getIpAddressTypes',
        'kill_chains' => 'getKillChains',
        'labels' => 'getLabels',
        'last_updated' => 'getLastUpdated',
        'malicious_confidence' => 'getMaliciousConfidence',
        'malware_families' => 'getMalwareFamilies',
        'published_date' => 'getPublishedDate',
        'relations' => 'getRelations',
        'reports' => 'getReports',
        'targets' => 'getTargets',
        'threat_types' => 'getThreatTypes',
        'type' => 'getType',
        'vulnerabilities' => 'getVulnerabilities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_marker'] = $data['_marker'] ?? null;
        $this->container['actors'] = $data['actors'] ?? null;
        $this->container['deleted'] = $data['deleted'] ?? null;
        $this->container['domain_types'] = $data['domain_types'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['indicator'] = $data['indicator'] ?? null;
        $this->container['ip_address_types'] = $data['ip_address_types'] ?? null;
        $this->container['kill_chains'] = $data['kill_chains'] ?? null;
        $this->container['labels'] = $data['labels'] ?? null;
        $this->container['last_updated'] = $data['last_updated'] ?? null;
        $this->container['malicious_confidence'] = $data['malicious_confidence'] ?? null;
        $this->container['malware_families'] = $data['malware_families'] ?? null;
        $this->container['published_date'] = $data['published_date'] ?? null;
        $this->container['relations'] = $data['relations'] ?? null;
        $this->container['reports'] = $data['reports'] ?? null;
        $this->container['targets'] = $data['targets'] ?? null;
        $this->container['threat_types'] = $data['threat_types'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['vulnerabilities'] = $data['vulnerabilities'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['_marker'] === null) {
            $invalidProperties[] = "'_marker' can't be null";
        }
        if ($this->container['actors'] === null) {
            $invalidProperties[] = "'actors' can't be null";
        }
        if ($this->container['deleted'] === null) {
            $invalidProperties[] = "'deleted' can't be null";
        }
        if ($this->container['domain_types'] === null) {
            $invalidProperties[] = "'domain_types' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['indicator'] === null) {
            $invalidProperties[] = "'indicator' can't be null";
        }
        if ($this->container['ip_address_types'] === null) {
            $invalidProperties[] = "'ip_address_types' can't be null";
        }
        if ($this->container['kill_chains'] === null) {
            $invalidProperties[] = "'kill_chains' can't be null";
        }
        if ($this->container['labels'] === null) {
            $invalidProperties[] = "'labels' can't be null";
        }
        if ($this->container['last_updated'] === null) {
            $invalidProperties[] = "'last_updated' can't be null";
        }
        if ($this->container['malicious_confidence'] === null) {
            $invalidProperties[] = "'malicious_confidence' can't be null";
        }
        if ($this->container['malware_families'] === null) {
            $invalidProperties[] = "'malware_families' can't be null";
        }
        if ($this->container['published_date'] === null) {
            $invalidProperties[] = "'published_date' can't be null";
        }
        if ($this->container['relations'] === null) {
            $invalidProperties[] = "'relations' can't be null";
        }
        if ($this->container['reports'] === null) {
            $invalidProperties[] = "'reports' can't be null";
        }
        if ($this->container['targets'] === null) {
            $invalidProperties[] = "'targets' can't be null";
        }
        if ($this->container['threat_types'] === null) {
            $invalidProperties[] = "'threat_types' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['vulnerabilities'] === null) {
            $invalidProperties[] = "'vulnerabilities' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _marker
     *
     * @return string
     */
    public function getMarker()
    {
        return $this->container['_marker'];
    }

    /**
     * Sets _marker
     *
     * @param string $_marker _marker
     *
     * @return self
     */
    public function setMarker($_marker)
    {
        $this->container['_marker'] = $_marker;

        return $this;
    }

    /**
     * Gets actors
     *
     * @return string[]
     */
    public function getActors()
    {
        return $this->container['actors'];
    }

    /**
     * Sets actors
     *
     * @param string[] $actors actors
     *
     * @return self
     */
    public function setActors($actors)
    {
        $this->container['actors'] = $actors;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted deleted
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets domain_types
     *
     * @return string[]
     */
    public function getDomainTypes()
    {
        return $this->container['domain_types'];
    }

    /**
     * Sets domain_types
     *
     * @param string[] $domain_types domain_types
     *
     * @return self
     */
    public function setDomainTypes($domain_types)
    {
        $this->container['domain_types'] = $domain_types;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets indicator
     *
     * @return string
     */
    public function getIndicator()
    {
        return $this->container['indicator'];
    }

    /**
     * Sets indicator
     *
     * @param string $indicator indicator
     *
     * @return self
     */
    public function setIndicator($indicator)
    {
        $this->container['indicator'] = $indicator;

        return $this;
    }

    /**
     * Gets ip_address_types
     *
     * @return string[]
     */
    public function getIpAddressTypes()
    {
        return $this->container['ip_address_types'];
    }

    /**
     * Sets ip_address_types
     *
     * @param string[] $ip_address_types ip_address_types
     *
     * @return self
     */
    public function setIpAddressTypes($ip_address_types)
    {
        $this->container['ip_address_types'] = $ip_address_types;

        return $this;
    }

    /**
     * Gets kill_chains
     *
     * @return string[]
     */
    public function getKillChains()
    {
        return $this->container['kill_chains'];
    }

    /**
     * Sets kill_chains
     *
     * @param string[] $kill_chains kill_chains
     *
     * @return self
     */
    public function setKillChains($kill_chains)
    {
        $this->container['kill_chains'] = $kill_chains;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \OpenAPI\Client\Model\DomainCSIXLabel[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \OpenAPI\Client\Model\DomainCSIXLabel[] $labels labels
     *
     * @return self
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return int
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param int $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets malicious_confidence
     *
     * @return string
     */
    public function getMaliciousConfidence()
    {
        return $this->container['malicious_confidence'];
    }

    /**
     * Sets malicious_confidence
     *
     * @param string $malicious_confidence malicious_confidence
     *
     * @return self
     */
    public function setMaliciousConfidence($malicious_confidence)
    {
        $this->container['malicious_confidence'] = $malicious_confidence;

        return $this;
    }

    /**
     * Gets malware_families
     *
     * @return string[]
     */
    public function getMalwareFamilies()
    {
        return $this->container['malware_families'];
    }

    /**
     * Sets malware_families
     *
     * @param string[] $malware_families malware_families
     *
     * @return self
     */
    public function setMalwareFamilies($malware_families)
    {
        $this->container['malware_families'] = $malware_families;

        return $this;
    }

    /**
     * Gets published_date
     *
     * @return int
     */
    public function getPublishedDate()
    {
        return $this->container['published_date'];
    }

    /**
     * Sets published_date
     *
     * @param int $published_date published_date
     *
     * @return self
     */
    public function setPublishedDate($published_date)
    {
        $this->container['published_date'] = $published_date;

        return $this;
    }

    /**
     * Gets relations
     *
     * @return \OpenAPI\Client\Model\DomainCSIXRelation[]
     */
    public function getRelations()
    {
        return $this->container['relations'];
    }

    /**
     * Sets relations
     *
     * @param \OpenAPI\Client\Model\DomainCSIXRelation[] $relations relations
     *
     * @return self
     */
    public function setRelations($relations)
    {
        $this->container['relations'] = $relations;

        return $this;
    }

    /**
     * Gets reports
     *
     * @return string[]
     */
    public function getReports()
    {
        return $this->container['reports'];
    }

    /**
     * Sets reports
     *
     * @param string[] $reports reports
     *
     * @return self
     */
    public function setReports($reports)
    {
        $this->container['reports'] = $reports;

        return $this;
    }

    /**
     * Gets targets
     *
     * @return string[]
     */
    public function getTargets()
    {
        return $this->container['targets'];
    }

    /**
     * Sets targets
     *
     * @param string[] $targets targets
     *
     * @return self
     */
    public function setTargets($targets)
    {
        $this->container['targets'] = $targets;

        return $this;
    }

    /**
     * Gets threat_types
     *
     * @return string[]
     */
    public function getThreatTypes()
    {
        return $this->container['threat_types'];
    }

    /**
     * Sets threat_types
     *
     * @param string[] $threat_types threat_types
     *
     * @return self
     */
    public function setThreatTypes($threat_types)
    {
        $this->container['threat_types'] = $threat_types;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets vulnerabilities
     *
     * @return string[]
     */
    public function getVulnerabilities()
    {
        return $this->container['vulnerabilities'];
    }

    /**
     * Sets vulnerabilities
     *
     * @param string[] $vulnerabilities vulnerabilities
     *
     * @return self
     */
    public function setVulnerabilities($vulnerabilities)
    {
        $this->container['vulnerabilities'] = $vulnerabilities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


