<?php
/**
 * BinservclientRemoteCommandPutFile
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.eu-1.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.eu-1.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.eu-1.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BinservclientRemoteCommandPutFile Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class BinservclientRemoteCommandPutFile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'binservclient.RemoteCommandPutFile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bucket' => 'string',
        'cid' => 'string',
        'comments_for_audit_log' => 'string',
        'content' => 'string',
        'created_by' => 'string',
        'created_by_uuid' => 'string',
        'created_timestamp' => '\DateTime',
        'description' => 'string',
        'file_type' => 'string',
        'id' => 'string',
        'modified_by' => 'string',
        'modified_by_uuid' => 'string',
        'modified_timestamp' => '\DateTime',
        'name' => 'string',
        'path' => 'string',
        'permission_type' => 'string',
        'platform' => 'string[]',
        'run_attempt_count' => 'int',
        'run_success_count' => 'int',
        'sha256' => 'string',
        'size' => 'int',
        'write_access' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bucket' => null,
        'cid' => null,
        'comments_for_audit_log' => null,
        'content' => null,
        'created_by' => null,
        'created_by_uuid' => null,
        'created_timestamp' => 'date-time',
        'description' => null,
        'file_type' => null,
        'id' => null,
        'modified_by' => null,
        'modified_by_uuid' => null,
        'modified_timestamp' => 'date-time',
        'name' => null,
        'path' => null,
        'permission_type' => null,
        'platform' => null,
        'run_attempt_count' => 'integer',
        'run_success_count' => 'integer',
        'sha256' => null,
        'size' => null,
        'write_access' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bucket' => 'bucket',
        'cid' => 'cid',
        'comments_for_audit_log' => 'comments_for_audit_log',
        'content' => 'content',
        'created_by' => 'created_by',
        'created_by_uuid' => 'created_by_uuid',
        'created_timestamp' => 'created_timestamp',
        'description' => 'description',
        'file_type' => 'file_type',
        'id' => 'id',
        'modified_by' => 'modified_by',
        'modified_by_uuid' => 'modified_by_uuid',
        'modified_timestamp' => 'modified_timestamp',
        'name' => 'name',
        'path' => 'path',
        'permission_type' => 'permission_type',
        'platform' => 'platform',
        'run_attempt_count' => 'run_attempt_count',
        'run_success_count' => 'run_success_count',
        'sha256' => 'sha256',
        'size' => 'size',
        'write_access' => 'write_access'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bucket' => 'setBucket',
        'cid' => 'setCid',
        'comments_for_audit_log' => 'setCommentsForAuditLog',
        'content' => 'setContent',
        'created_by' => 'setCreatedBy',
        'created_by_uuid' => 'setCreatedByUuid',
        'created_timestamp' => 'setCreatedTimestamp',
        'description' => 'setDescription',
        'file_type' => 'setFileType',
        'id' => 'setId',
        'modified_by' => 'setModifiedBy',
        'modified_by_uuid' => 'setModifiedByUuid',
        'modified_timestamp' => 'setModifiedTimestamp',
        'name' => 'setName',
        'path' => 'setPath',
        'permission_type' => 'setPermissionType',
        'platform' => 'setPlatform',
        'run_attempt_count' => 'setRunAttemptCount',
        'run_success_count' => 'setRunSuccessCount',
        'sha256' => 'setSha256',
        'size' => 'setSize',
        'write_access' => 'setWriteAccess'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bucket' => 'getBucket',
        'cid' => 'getCid',
        'comments_for_audit_log' => 'getCommentsForAuditLog',
        'content' => 'getContent',
        'created_by' => 'getCreatedBy',
        'created_by_uuid' => 'getCreatedByUuid',
        'created_timestamp' => 'getCreatedTimestamp',
        'description' => 'getDescription',
        'file_type' => 'getFileType',
        'id' => 'getId',
        'modified_by' => 'getModifiedBy',
        'modified_by_uuid' => 'getModifiedByUuid',
        'modified_timestamp' => 'getModifiedTimestamp',
        'name' => 'getName',
        'path' => 'getPath',
        'permission_type' => 'getPermissionType',
        'platform' => 'getPlatform',
        'run_attempt_count' => 'getRunAttemptCount',
        'run_success_count' => 'getRunSuccessCount',
        'sha256' => 'getSha256',
        'size' => 'getSize',
        'write_access' => 'getWriteAccess'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bucket'] = $data['bucket'] ?? null;
        $this->container['cid'] = $data['cid'] ?? null;
        $this->container['comments_for_audit_log'] = $data['comments_for_audit_log'] ?? null;
        $this->container['content'] = $data['content'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['created_by_uuid'] = $data['created_by_uuid'] ?? null;
        $this->container['created_timestamp'] = $data['created_timestamp'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['file_type'] = $data['file_type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['modified_by'] = $data['modified_by'] ?? null;
        $this->container['modified_by_uuid'] = $data['modified_by_uuid'] ?? null;
        $this->container['modified_timestamp'] = $data['modified_timestamp'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['path'] = $data['path'] ?? null;
        $this->container['permission_type'] = $data['permission_type'] ?? null;
        $this->container['platform'] = $data['platform'] ?? null;
        $this->container['run_attempt_count'] = $data['run_attempt_count'] ?? null;
        $this->container['run_success_count'] = $data['run_success_count'] ?? null;
        $this->container['sha256'] = $data['sha256'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['write_access'] = $data['write_access'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['run_attempt_count'] === null) {
            $invalidProperties[] = "'run_attempt_count' can't be null";
        }
        if ($this->container['run_success_count'] === null) {
            $invalidProperties[] = "'run_success_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bucket
     *
     * @return string|null
     */
    public function getBucket()
    {
        return $this->container['bucket'];
    }

    /**
     * Sets bucket
     *
     * @param string|null $bucket bucket
     *
     * @return self
     */
    public function setBucket($bucket)
    {
        $this->container['bucket'] = $bucket;

        return $this;
    }

    /**
     * Gets cid
     *
     * @return string|null
     */
    public function getCid()
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param string|null $cid cid
     *
     * @return self
     */
    public function setCid($cid)
    {
        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets comments_for_audit_log
     *
     * @return string|null
     */
    public function getCommentsForAuditLog()
    {
        return $this->container['comments_for_audit_log'];
    }

    /**
     * Sets comments_for_audit_log
     *
     * @param string|null $comments_for_audit_log comments_for_audit_log
     *
     * @return self
     */
    public function setCommentsForAuditLog($comments_for_audit_log)
    {
        $this->container['comments_for_audit_log'] = $comments_for_audit_log;

        return $this;
    }

    /**
     * Gets content
     *
     * @return string|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string|null $content content
     *
     * @return self
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_by_uuid
     *
     * @return string|null
     */
    public function getCreatedByUuid()
    {
        return $this->container['created_by_uuid'];
    }

    /**
     * Sets created_by_uuid
     *
     * @param string|null $created_by_uuid created_by_uuid
     *
     * @return self
     */
    public function setCreatedByUuid($created_by_uuid)
    {
        $this->container['created_by_uuid'] = $created_by_uuid;

        return $this;
    }

    /**
     * Gets created_timestamp
     *
     * @return \DateTime|null
     */
    public function getCreatedTimestamp()
    {
        return $this->container['created_timestamp'];
    }

    /**
     * Sets created_timestamp
     *
     * @param \DateTime|null $created_timestamp created_timestamp
     *
     * @return self
     */
    public function setCreatedTimestamp($created_timestamp)
    {
        $this->container['created_timestamp'] = $created_timestamp;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets file_type
     *
     * @return string|null
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     *
     * @param string|null $file_type file_type
     *
     * @return self
     */
    public function setFileType($file_type)
    {
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return string|null
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param string|null $modified_by modified_by
     *
     * @return self
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets modified_by_uuid
     *
     * @return string|null
     */
    public function getModifiedByUuid()
    {
        return $this->container['modified_by_uuid'];
    }

    /**
     * Sets modified_by_uuid
     *
     * @param string|null $modified_by_uuid modified_by_uuid
     *
     * @return self
     */
    public function setModifiedByUuid($modified_by_uuid)
    {
        $this->container['modified_by_uuid'] = $modified_by_uuid;

        return $this;
    }

    /**
     * Gets modified_timestamp
     *
     * @return \DateTime|null
     */
    public function getModifiedTimestamp()
    {
        return $this->container['modified_timestamp'];
    }

    /**
     * Sets modified_timestamp
     *
     * @param \DateTime|null $modified_timestamp modified_timestamp
     *
     * @return self
     */
    public function setModifiedTimestamp($modified_timestamp)
    {
        $this->container['modified_timestamp'] = $modified_timestamp;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets permission_type
     *
     * @return string|null
     */
    public function getPermissionType()
    {
        return $this->container['permission_type'];
    }

    /**
     * Sets permission_type
     *
     * @param string|null $permission_type permission_type
     *
     * @return self
     */
    public function setPermissionType($permission_type)
    {
        $this->container['permission_type'] = $permission_type;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string[]|null
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string[]|null $platform platform
     *
     * @return self
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets run_attempt_count
     *
     * @return int
     */
    public function getRunAttemptCount()
    {
        return $this->container['run_attempt_count'];
    }

    /**
     * Sets run_attempt_count
     *
     * @param int $run_attempt_count run_attempt_count
     *
     * @return self
     */
    public function setRunAttemptCount($run_attempt_count)
    {
        $this->container['run_attempt_count'] = $run_attempt_count;

        return $this;
    }

    /**
     * Gets run_success_count
     *
     * @return int
     */
    public function getRunSuccessCount()
    {
        return $this->container['run_success_count'];
    }

    /**
     * Sets run_success_count
     *
     * @param int $run_success_count run_success_count
     *
     * @return self
     */
    public function setRunSuccessCount($run_success_count)
    {
        $this->container['run_success_count'] = $run_success_count;

        return $this;
    }

    /**
     * Gets sha256
     *
     * @return string|null
     */
    public function getSha256()
    {
        return $this->container['sha256'];
    }

    /**
     * Sets sha256
     *
     * @param string|null $sha256 sha256
     *
     * @return self
     */
    public function setSha256($sha256)
    {
        $this->container['sha256'] = $sha256;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets write_access
     *
     * @return bool|null
     */
    public function getWriteAccess()
    {
        return $this->container['write_access'];
    }

    /**
     * Sets write_access
     *
     * @param bool|null $write_access write_access
     *
     * @return self
     */
    public function setWriteAccess($write_access)
    {
        $this->container['write_access'] = $write_access;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


