<?php
/**
 * DomainSession
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.eu-1.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.eu-1.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.eu-1.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DomainSession Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class DomainSession implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'domain.Session';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cid' => 'string',
        'cloud_request_ids' => 'string[]',
        'commands' => 'map[string,object]',
        'commands_queued' => 'bool',
        'created_at' => '\DateTime',
        'deleted_at' => '\DateTime',
        'device_details' => '\OpenAPI\Client\Model\DomainDevice',
        'device_id' => 'string',
        'duration' => 'double',
        'hostname' => 'string',
        'id' => 'string',
        'logs' => '\OpenAPI\Client\Model\ModelSessionLog[]',
        'offline_queued' => 'bool',
        'origin' => 'string',
        'platform_id' => 'int',
        'platform_name' => 'string',
        'pwd' => 'string',
        'updated_at' => '\DateTime',
        'user_id' => 'string',
        'user_uuid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cid' => null,
        'cloud_request_ids' => null,
        'commands' => null,
        'commands_queued' => null,
        'created_at' => 'date-time',
        'deleted_at' => 'date-time',
        'device_details' => null,
        'device_id' => null,
        'duration' => 'double',
        'hostname' => null,
        'id' => null,
        'logs' => null,
        'offline_queued' => null,
        'origin' => null,
        'platform_id' => 'int32',
        'platform_name' => null,
        'pwd' => null,
        'updated_at' => 'date-time',
        'user_id' => null,
        'user_uuid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cid' => 'cid',
        'cloud_request_ids' => 'cloud_request_ids',
        'commands' => 'commands',
        'commands_queued' => 'commands_queued',
        'created_at' => 'created_at',
        'deleted_at' => 'deleted_at',
        'device_details' => 'device_details',
        'device_id' => 'device_id',
        'duration' => 'duration',
        'hostname' => 'hostname',
        'id' => 'id',
        'logs' => 'logs',
        'offline_queued' => 'offline_queued',
        'origin' => 'origin',
        'platform_id' => 'platform_id',
        'platform_name' => 'platform_name',
        'pwd' => 'pwd',
        'updated_at' => 'updated_at',
        'user_id' => 'user_id',
        'user_uuid' => 'user_uuid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cid' => 'setCid',
        'cloud_request_ids' => 'setCloudRequestIds',
        'commands' => 'setCommands',
        'commands_queued' => 'setCommandsQueued',
        'created_at' => 'setCreatedAt',
        'deleted_at' => 'setDeletedAt',
        'device_details' => 'setDeviceDetails',
        'device_id' => 'setDeviceId',
        'duration' => 'setDuration',
        'hostname' => 'setHostname',
        'id' => 'setId',
        'logs' => 'setLogs',
        'offline_queued' => 'setOfflineQueued',
        'origin' => 'setOrigin',
        'platform_id' => 'setPlatformId',
        'platform_name' => 'setPlatformName',
        'pwd' => 'setPwd',
        'updated_at' => 'setUpdatedAt',
        'user_id' => 'setUserId',
        'user_uuid' => 'setUserUuid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cid' => 'getCid',
        'cloud_request_ids' => 'getCloudRequestIds',
        'commands' => 'getCommands',
        'commands_queued' => 'getCommandsQueued',
        'created_at' => 'getCreatedAt',
        'deleted_at' => 'getDeletedAt',
        'device_details' => 'getDeviceDetails',
        'device_id' => 'getDeviceId',
        'duration' => 'getDuration',
        'hostname' => 'getHostname',
        'id' => 'getId',
        'logs' => 'getLogs',
        'offline_queued' => 'getOfflineQueued',
        'origin' => 'getOrigin',
        'platform_id' => 'getPlatformId',
        'platform_name' => 'getPlatformName',
        'pwd' => 'getPwd',
        'updated_at' => 'getUpdatedAt',
        'user_id' => 'getUserId',
        'user_uuid' => 'getUserUuid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cid'] = $data['cid'] ?? null;
        $this->container['cloud_request_ids'] = $data['cloud_request_ids'] ?? null;
        $this->container['commands'] = $data['commands'] ?? null;
        $this->container['commands_queued'] = $data['commands_queued'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['deleted_at'] = $data['deleted_at'] ?? null;
        $this->container['device_details'] = $data['device_details'] ?? null;
        $this->container['device_id'] = $data['device_id'] ?? null;
        $this->container['duration'] = $data['duration'] ?? null;
        $this->container['hostname'] = $data['hostname'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['logs'] = $data['logs'] ?? null;
        $this->container['offline_queued'] = $data['offline_queued'] ?? null;
        $this->container['origin'] = $data['origin'] ?? null;
        $this->container['platform_id'] = $data['platform_id'] ?? null;
        $this->container['platform_name'] = $data['platform_name'] ?? null;
        $this->container['pwd'] = $data['pwd'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['user_uuid'] = $data['user_uuid'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['cid'] === null) {
            $invalidProperties[] = "'cid' can't be null";
        }
        if ($this->container['cloud_request_ids'] === null) {
            $invalidProperties[] = "'cloud_request_ids' can't be null";
        }
        if ($this->container['commands'] === null) {
            $invalidProperties[] = "'commands' can't be null";
        }
        if ($this->container['commands_queued'] === null) {
            $invalidProperties[] = "'commands_queued' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['deleted_at'] === null) {
            $invalidProperties[] = "'deleted_at' can't be null";
        }
        if ($this->container['device_details'] === null) {
            $invalidProperties[] = "'device_details' can't be null";
        }
        if ($this->container['device_id'] === null) {
            $invalidProperties[] = "'device_id' can't be null";
        }
        if ($this->container['duration'] === null) {
            $invalidProperties[] = "'duration' can't be null";
        }
        if ($this->container['hostname'] === null) {
            $invalidProperties[] = "'hostname' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['logs'] === null) {
            $invalidProperties[] = "'logs' can't be null";
        }
        if ($this->container['offline_queued'] === null) {
            $invalidProperties[] = "'offline_queued' can't be null";
        }
        if ($this->container['origin'] === null) {
            $invalidProperties[] = "'origin' can't be null";
        }
        if ($this->container['platform_id'] === null) {
            $invalidProperties[] = "'platform_id' can't be null";
        }
        if ($this->container['platform_name'] === null) {
            $invalidProperties[] = "'platform_name' can't be null";
        }
        if ($this->container['pwd'] === null) {
            $invalidProperties[] = "'pwd' can't be null";
        }
        if ($this->container['updated_at'] === null) {
            $invalidProperties[] = "'updated_at' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['user_uuid'] === null) {
            $invalidProperties[] = "'user_uuid' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cid
     *
     * @return string
     */
    public function getCid()
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param string $cid cid
     *
     * @return self
     */
    public function setCid($cid)
    {
        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets cloud_request_ids
     *
     * @return string[]
     */
    public function getCloudRequestIds()
    {
        return $this->container['cloud_request_ids'];
    }

    /**
     * Sets cloud_request_ids
     *
     * @param string[] $cloud_request_ids cloud_request_ids
     *
     * @return self
     */
    public function setCloudRequestIds($cloud_request_ids)
    {
        $this->container['cloud_request_ids'] = $cloud_request_ids;

        return $this;
    }

    /**
     * Gets commands
     *
     * @return map[string,object]
     */
    public function getCommands()
    {
        return $this->container['commands'];
    }

    /**
     * Sets commands
     *
     * @param map[string,object] $commands commands
     *
     * @return self
     */
    public function setCommands($commands)
    {
        $this->container['commands'] = $commands;

        return $this;
    }

    /**
     * Gets commands_queued
     *
     * @return bool
     */
    public function getCommandsQueued()
    {
        return $this->container['commands_queued'];
    }

    /**
     * Sets commands_queued
     *
     * @param bool $commands_queued commands_queued
     *
     * @return self
     */
    public function setCommandsQueued($commands_queued)
    {
        $this->container['commands_queued'] = $commands_queued;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return \DateTime
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param \DateTime $deleted_at deleted_at
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets device_details
     *
     * @return \OpenAPI\Client\Model\DomainDevice
     */
    public function getDeviceDetails()
    {
        return $this->container['device_details'];
    }

    /**
     * Sets device_details
     *
     * @param \OpenAPI\Client\Model\DomainDevice $device_details device_details
     *
     * @return self
     */
    public function setDeviceDetails($device_details)
    {
        $this->container['device_details'] = $device_details;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string $device_id device_id
     *
     * @return self
     */
    public function setDeviceId($device_id)
    {
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return double
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param double $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname hostname
     *
     * @return self
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets logs
     *
     * @return \OpenAPI\Client\Model\ModelSessionLog[]
     */
    public function getLogs()
    {
        return $this->container['logs'];
    }

    /**
     * Sets logs
     *
     * @param \OpenAPI\Client\Model\ModelSessionLog[] $logs logs
     *
     * @return self
     */
    public function setLogs($logs)
    {
        $this->container['logs'] = $logs;

        return $this;
    }

    /**
     * Gets offline_queued
     *
     * @return bool
     */
    public function getOfflineQueued()
    {
        return $this->container['offline_queued'];
    }

    /**
     * Sets offline_queued
     *
     * @param bool $offline_queued offline_queued
     *
     * @return self
     */
    public function setOfflineQueued($offline_queued)
    {
        $this->container['offline_queued'] = $offline_queued;

        return $this;
    }

    /**
     * Gets origin
     *
     * @return string
     */
    public function getOrigin()
    {
        return $this->container['origin'];
    }

    /**
     * Sets origin
     *
     * @param string $origin origin
     *
     * @return self
     */
    public function setOrigin($origin)
    {
        $this->container['origin'] = $origin;

        return $this;
    }

    /**
     * Gets platform_id
     *
     * @return int
     */
    public function getPlatformId()
    {
        return $this->container['platform_id'];
    }

    /**
     * Sets platform_id
     *
     * @param int $platform_id platform_id
     *
     * @return self
     */
    public function setPlatformId($platform_id)
    {
        $this->container['platform_id'] = $platform_id;

        return $this;
    }

    /**
     * Gets platform_name
     *
     * @return string
     */
    public function getPlatformName()
    {
        return $this->container['platform_name'];
    }

    /**
     * Sets platform_name
     *
     * @param string $platform_name platform_name
     *
     * @return self
     */
    public function setPlatformName($platform_name)
    {
        $this->container['platform_name'] = $platform_name;

        return $this;
    }

    /**
     * Gets pwd
     *
     * @return string
     */
    public function getPwd()
    {
        return $this->container['pwd'];
    }

    /**
     * Sets pwd
     *
     * @param string $pwd pwd
     *
     * @return self
     */
    public function setPwd($pwd)
    {
        $this->container['pwd'] = $pwd;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user_uuid
     *
     * @return string
     */
    public function getUserUuid()
    {
        return $this->container['user_uuid'];
    }

    /**
     * Sets user_uuid
     *
     * @param string $user_uuid user_uuid
     *
     * @return self
     */
    public function setUserUuid($user_uuid)
    {
        $this->container['user_uuid'] = $user_uuid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


